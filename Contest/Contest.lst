Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/02/24 09:01:19
runner.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				SetConsoleTextAttribute PROTO,
				    hConsoleOutput: DWORD,
				    wAttributes: WORD

				SetConsoleCursorInfo PROTO,
				    hConsoleOutput:DWORD,
				    lpConsoleCursorInfo:PTR CONSOLE_CURSOR_INFO

				CONSOLE_CURSOR_INFO STRUCT
				    dwSize DWORD ?
				    bVisible DWORD ?
				CONSOLE_CURSOR_INFO ENDS

 00000000			.data
 00000000 00000001		cursorInfo CONSOLE_CURSOR_INFO <1, FALSE>  ; Set cursor size to 1 and visibility to FALSE
	   00000000

 00000008 43 6F 6E 67 72	outroString db "Congratulations! You have collected all the stars and saved the world from math illiteracy!", 0Dh, 0Ah, 0Dh, 0Ah
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   20 68 61 76 65
	   20 63 6F 6C 6C
	   65 63 74 65 64
	   20 61 6C 6C 20
	   74 68 65 20 73
	   74 61 72 73 20
	   61 6E 64 20 73
	   61 76 65 64 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   66 72 6F 6D 20
	   6D 61 74 68 20
	   69 6C 6C 69 74
	   65 72 61 63 79
	   21 0D 0A 0D 0A
 00000067  59 6F 75 20 61				db "You are now the math master of the world! Press any key to exit...", 0Dh, 0Ah, 0
	   72 65 20 6E 6F
	   77 20 74 68 65
	   20 6D 61 74 68
	   20 6D 61 73 74
	   65 72 20 6F 66
	   20 74 68 65 20
	   77 6F 72 6C 64
	   21 20 50 72 65
	   73 73 20 61 6E
	   79 20 6B 65 79
	   20 74 6F 20 65
	   78 69 74 2E 2E
	   2E 0D 0A 00

 000000AC 57 65 6C 63 6F	introString db "Welcome to... ", 0Dh, 0Ah, 0Dh, 0Ah
	   6D 65 20 74 6F
	   2E 2E 2E 20 0D
	   0A 0D 0A

 000000BE  20 20 5F 5F 20				db "  __  __    _  _____ _   _ _____ __  __  ___  _   _ ___ _   _ __  __ ", 0Dh, 0Ah
	   20 5F 5F 20 20
	   20 20 5F 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   20 20 5F 5F 20
	   20 5F 5F 5F 20
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 20
	   20 5F 5F 20 0D
	   0A
 00000105  20 7C 20 20 5C				db " |  \/  |  / \|_   _| | | | ____|  \/  |/ _ \| \ | |_ _| | | |  \/  |", 0Dh, 0Ah
	   2F 20 20 7C 20
	   20 2F 20 5C 7C
	   5F 20 20 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 5F 5F
	   5F 5F 7C 20 20
	   5C 2F 20 20 7C
	   2F 20 5F 20 5C
	   7C 20 5C 20 7C
	   20 7C 5F 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 20 5C
	   2F 20 20 7C 0D
	   0A
 0000014C  20 7C 20 7C 5C				db " | |\/| | / _ \ | | | |_| |  _| | |\/| | | | |  \| || || | | | |\/| |", 0Dh, 0Ah
	   2F 7C 20 7C 20
	   2F 20 5F 20 5C
	   20 7C 20 7C 20
	   7C 20 7C 5F 7C
	   20 7C 20 20 5F
	   7C 20 7C 20 7C
	   5C 2F 7C 20 7C
	   20 7C 20 7C 20
	   7C 20 20 5C 7C
	   20 7C 7C 20 7C
	   7C 20 7C 20 7C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 0D
	   0A
 00000193  20 7C 20 7C 20				db " | |  | |/ ___ \| | |  _  | |___| |  | | |_| | |\  || || |_| | |  | |", 0Dh, 0Ah
	   20 7C 20 7C 2F
	   20 5F 5F 5F 20
	   5C 7C 20 7C 20
	   7C 20 20 5F 20
	   20 7C 20 7C 5F
	   5F 5F 7C 20 7C
	   20 20 7C 20 7C
	   20 7C 5F 7C 20
	   7C 20 7C 5C 20
	   20 7C 7C 20 7C
	   7C 20 7C 5F 7C
	   20 7C 20 7C 20
	   20 7C 20 7C 0D
	   0A
 000001DA  20 7C 5F 7C 20				db " |_|  |_/_/   \_\_| |_| |_|_____|_|  |_|\___/|_| \_|___|\___/|_|  |_|", 0Dh, 0Ah, 0Dh, 0Ah
	   20 7C 5F 2F 5F
	   2F 20 20 20 5C
	   5F 5C 5F 7C 20
	   7C 5F 7C 20 7C
	   5F 7C 5F 5F 5F
	   5F 5F 7C 5F 7C
	   20 20 7C 5F 7C
	   5C 5F 5F 5F 2F
	   7C 5F 7C 20 5C
	   5F 7C 5F 5F 5F
	   7C 5C 5F 5F 5F
	   2F 7C 5F 7C 20
	   20 7C 5F 7C 0D
	   0A 0D 0A


 00000223  61 20 67 61 6D				db "a game of math and adventure!", 0Dh, 0Ah
	   65 20 6F 66 20
	   6D 61 74 68 20
	   61 6E 64 20 61
	   64 76 65 6E 74
	   75 72 65 21 0D
	   0A
 00000242  54 72 61 76 65				db "Travel through the world and challenge all the math masters.... if you dare....", 0Dh, 0Ah, 0Dh, 0ah
	   6C 20 74 68 72
	   6F 75 67 68 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   61 6E 64 20 63
	   68 61 6C 6C 65
	   6E 67 65 20 61
	   6C 6C 20 74 68
	   65 20 6D 61 74
	   68 20 6D 61 73
	   74 65 72 73 2E
	   2E 2E 2E 20 69
	   66 20 79 6F 75
	   20 64 61 72 65
	   2E 2E 2E 2E 0D
	   0A 0D 0A
 00000295  54 49 50 53 20				db "TIPS & INFO:", 0Dh, 0Ah
	   26 20 49 4E 46
	   4F 3A 0D 0A
 000002A3  20 2D 20 41 73				db " - Asterisks (*) represent a math master, go up and press space to begin battle", 0Dh, 0Ah
	   74 65 72 69 73
	   6B 73 20 28 2A
	   29 20 72 65 70
	   72 65 73 65 6E
	   74 20 61 20 6D
	   61 74 68 20 6D
	   61 73 74 65 72
	   2C 20 67 6F 20
	   75 70 20 61 6E
	   64 20 70 72 65
	   73 73 20 73 70
	   61 63 65 20 74
	   6F 20 62 65 67
	   69 6E 20 62 61
	   74 74 6C 65 0D
	   0A
 000002F4  20 2D 20 59 6F				db " - You may want to get some questions wrong here and there, as you win, difficulty and terms per question increase", 0Dh, 0Ah
	   75 20 6D 61 79
	   20 77 61 6E 74
	   20 74 6F 20 67
	   65 74 20 73 6F
	   6D 65 20 71 75
	   65 73 74 69 6F
	   6E 73 20 77 72
	   6F 6E 67 20 68
	   65 72 65 20 61
	   6E 64 20 74 68
	   65 72 65 2C 20
	   61 73 20 79 6F
	   75 20 77 69 6E
	   2C 20 64 69 66
	   66 69 63 75 6C
	   74 79 20 61 6E
	   64 20 74 65 72
	   6D 73 20 70 65
	   72 20 71 75 65
	   73 74 69 6F 6E
	   20 69 6E 63 72
	   65 61 73 65 0D
	   0A
 00000368  20 2D 20 50 45				db " - PEMDAS will not work here, equations are evaluated left to right", 0Dh, 0Ah
	   4D 44 41 53 20
	   77 69 6C 6C 20
	   6E 6F 74 20 77
	   6F 72 6B 20 68
	   65 72 65 2C 20
	   65 71 75 61 74
	   69 6F 6E 73 20
	   61 72 65 20 65
	   76 61 6C 75 61
	   74 65 64 20 6C
	   65 66 74 20 74
	   6F 20 72 69 67
	   68 74 0D 0A
 000003AD  50 72 65 73 73				db "Press any key to continue...", 0Dh, 0Ah, 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 0D 0A
	   00
						

 000003CC 43 6F 72 72 65	correctAnswerString db "Correct! Math masters hear your name world wide and prepare in anticipation of your arrival...", 0
	   63 74 21 20 4D
	   61 74 68 20 6D
	   61 73 74 65 72
	   73 20 68 65 61
	   72 20 79 6F 75
	   72 20 6E 61 6D
	   65 20 77 6F 72
	   6C 64 20 77 69
	   64 65 20 61 6E
	   64 20 70 72 65
	   70 61 72 65 20
	   69 6E 20 61 6E
	   74 69 63 69 70
	   61 74 69 6F 6E
	   20 6F 66 20 79
	   6F 75 72 20 61
	   72 72 69 76 61
	   6C 2E 2E 2E 00
 0000042B 49 6E 63 6F 72	incorrectAnswerString db "Incorrect! The world is doomed to a future of math illiteracy...", 0
	   72 65 63 74 21
	   20 54 68 65 20
	   77 6F 72 6C 64
	   20 69 73 20 64
	   6F 6F 6D 65 64
	   20 74 6F 20 61
	   20 66 75 74 75
	   72 65 20 6F 66
	   20 6D 61 74 68
	   20 69 6C 6C 69
	   74 65 72 61 63
	   79 2E 2E 2E 00

 0000046C 77 6F 72 6C 64	filename BYTE "world.txt",0
	   2E 74 78 74 00
 00000476  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 000017FE 00000000		fileHandle DWORD ?
 00001802 00000000		bytesRead DWORD ?

 00001806 6D 61 74 68 70	phrasesfilename BYTE "mathphrases.txt",0
	   68 72 61 73 65
	   73 2E 74 78 74
	   00
 00001816  00001388 [		phrasesbuffer BYTE 5000 DUP(?)
	    00
	   ]
 00002B9E 00000000		phrasesfileHandle DWORD ?
 00002BA2 00000000		phrasesbytesRead DWORD ?
 00002BA6 00000000		phraseStart DWORD ?
 00002BAA 00000000		phraseEnd DWORD ?

 00002BAE 00000000		starPos DWORD ?
 00002BB2 00			totalStars BYTE 0
 00002BB3 00			oldX BYTE ?
 00002BB4 00			oldY BYTE ?
 00002BB5 50			maxX BYTE 80
 00002BB6 19			maxY BYTE 25
 00002BB7 01			xPos BYTE 1
 00002BB8 01			yPos BYTE 1

 00002BB9 02			difficultyLevel BYTE 2

 00002BBA 00000000		equationAnswer DWORD ?			; Variable to store the answer to the equation
 00002BBE 00			terms BYTE ?					; Number of terms in the equation
 00002BBF 00			operator BYTE ?					; Equation operator code
 00002BC0 00			term BYTE ?						; Equation term
 00002BC1  00001388 [		equationBuffer BYTE 5000 DUP(?) ; Buffer to store the equation
	    00
	   ]

				; Macro to put buffer position into edi
				GetBufferPos MACRO
					movzx eax, maxX	; move max X into eax
					add eax, 2		; add 2 to account for new line characters
					movzx edi, yPos	; move y into edi
					mov ebx, edx
					mul edi			; multiply y by max x to get right row
					mov edx, ebx
					mov edi, eax	; mov mul result back into edi
					movzx eax, xPos	; zero extend xpos to add to edi
					add edi, eax	; add x to edi to get proper index
					ENDM

 00000000			.code
 00000000			main PROC
					
 00000000  E8 00000089			call HideCursor
 00000005  E8 000003A4			call PrepareWorld
 0000000A  E8 0000049E			call PreparePhrases
 0000000F  E8 000003DD			call CountStars

 00000014  E8 00000096			call IntroScreen

 00000019  E8 000003FB			call DrawWorld
 0000001E  E8 000000A3			call InitDotPosition
					
 00000023  B2 55			mov dl, 85
 00000025  B6 05			mov dh, 5
 00000027  E8 00000000 E		call Gotoxy

					
 0000002C				game:
 0000002C  B8 00000010				mov eax, 16
 00000031  E8 00000000 E			call Delay
						;call DrawInfo
 00000036  E8 000000A9				call MoveDot
						.IF totalStars == 0
 00000044  EB 02					jmp Outro
						.ENDIF
 00000046  EB E4			jmp game

 00000048				Outro:
 00000048  E8 00000007				call DisplayOutro

					exit
 00000054			main ENDP

 00000054			DisplayOutro PROC
 00000054  E8 00000000 E		call Clrscr
 00000059  B2 00			mov dl, 0
 0000005B  B6 00			mov dh, 0
 0000005D  BA 00000008 R		mov edx, OFFSET outroString
 00000062  E8 00000000 E		call WriteString

					;Wait for key press before exiting outro screen
 00000067				WaitLoop:
 00000067  E8 00000000 E		call ReadKey
 0000006C  74 F9			jz WaitLoop

 0000006E  C3				ret
 0000006F			DisplayOutro ENDP

 0000006F			SetColor PROC
				    LOCAL hConsole:DWORD

					; Get a handle to the console's output buffer
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 0000007C  89 45 FC			mov hConsole, eax

					; Set the text color
					invoke SetConsoleTextAttribute, hConsole, cx
					ret

 0000008E			SetColor ENDP

 0000008E			HideCursor PROC
				    LOCAL hConsole:DWORD
				    ; Get a handle to the console's output buffer
				    invoke GetStdHandle, STD_OUTPUT_HANDLE
 0000009B  89 45 FC		    mov hConsole, eax
				    ; Set the cursor info to hide the cursor
 0000009E  8D 05 00000000 R	    lea eax, cursorInfo
				    invoke SetConsoleCursorInfo, hConsole, eax
				    ret
 000000AF			HideCursor ENDP

 000000AF			IntroScreen PROC
					; Clear screen and write intro message
 000000AF  E8 00000000 E		call Clrscr
 000000B4  BA 000000AC R		mov edx, OFFSET introString
 000000B9  E8 00000000 E		call WriteString


					;Wait for key press before exiting intro screen
 000000BE				WaitLoop:
 000000BE  E8 00000000 E		call ReadKey
 000000C3  74 F9			jz WaitLoop

 000000C5  C3				ret
 000000C6			IntroScreen ENDP

 000000C6			InitDotPosition PROC
 000000C6  BA 00000000			mov edx, 0
 000000CB  8A 15 00002BB7 R		mov dl ,xPos
 000000D1  8A 35 00002BB8 R		mov dh, yPos
 000000D7  E8 00000000 E		call Gotoxy
 000000DC  B0 2E			mov al, '.'
 000000DE  E8 00000000 E		call WriteChar
 000000E3  C3				ret
 000000E4			InitDotPosition ENDP

 000000E4			MoveDot PROC
 000000E4  E8 00000000 E		call ReadKey
 000000E9  0F 84 0000028E		jz RedrawDot

					; Save old position
 000000EF  8A 15 00002BB7 R		mov dl, xPos
 000000F5  88 15 00002BB3 R		mov oldX, dl
 000000FB  8A 35 00002BB8 R		mov dh, yPos
 00000101  88 35 00002BB4 R		mov oldY, dh

					; Check direction based on virtual scan code (AH)
 00000107  80 FC 48		    cmp  ah, 48h        ; Up arrow
 0000010A  0F 84 0000013B	    je   MoveUp
 00000110  80 FC 50		    cmp  ah, 50h        ; Down arrow
 00000113  0F 84 00000188	    je   MoveDown
 00000119  80 FC 4B		    cmp  ah, 4Bh        ; Left arrow
 0000011C  0F 84 000001D8	    je   MoveLeft
 00000122  80 FC 4D		    cmp  ah, 4Dh        ; Right arrow
 00000125  0F 84 0000020F	    je   MoveRight
 0000012B  80 FC 39			cmp  ah, 39h		; Space
 0000012E  74 05		          	je	 CheckStar
					
 00000130  E9 00000248			jmp RedrawDot			; Check for new input if none matched

 00000135				CheckStar:
						; Check if the dot is next to a star
						GetBufferPos
 00000135  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 0000013C  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000013F  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 00000146  8B DA	     1		mov ebx, edx
 00000148  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000014A  8B D3	     1		mov edx, ebx
 0000014C  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000014E  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 00000155  03 F8	     1		add edi, eax	; add x to edi to get proper index

						; Place length of one row into eax
 00000157  0F B6 1D				movzx ebx, maxX	; move max X into eax
	   00002BB5 R
 0000015E  83 C3 02				add ebx, 2		; add 2 to account for new line characters

						; Check Above
 00000161  2B FB				sub edi, ebx	; subtract by one row to check above
 00000163  8A 87 00000476 R			mov al, byte ptr [buffer + edi]
 00000169  3C 2A				cmp al, '*'
 0000016B  74 2D				je checkPass

 0000016D  03 FB				add edi, ebx	; add back to edi to return to original position


						; Check Below
 0000016F  03 FB				add edi, ebx	; add one row to check below
 00000171  8A 87 00000476 R			mov al, byte ptr [buffer + edi]
 00000177  3C 2A				cmp al, '*'
 00000179  74 1F				je checkPass

 0000017B  2B FB				sub edi, ebx	; subtract by one row to return to original position


						; Check Left
 0000017D  4F					dec edi			; move x left one to check left
 0000017E  8A 87 00000476 R			mov al, byte ptr [buffer + edi]
 00000184  3C 2A				cmp al, '*'
 00000186  74 12				je checkPass

 00000188  47					inc edi 		; add back to edi to return to original position


						; Check Right
 00000189  47					inc edi			; move x right one to check right
 0000018A  8A 87 00000476 R			mov al, byte ptr [buffer + edi]
 00000190  3C 2A				cmp al, '*'
 00000192  74 06				je checkPass

 00000194  4F					dec edi			; subtract by one row to return to original position

						
 00000195  E9 000000AC				jmp checkFail

 0000019A					checkPass:
						    ; Save the position of the star
 0000019A  89 3D 00002BAE R				mov starPos, edi
							; Clear screen, write battle message, show math problem
 000001A0  E8 00000000 E				call Clrscr
							; Move cursor to top left corner
 000001A5  B2 00					mov dl, 0
 000001A7  B6 00					mov dh, 0
 000001A9  E8 00000000 E				call Gotoxy
							; Write battle message
 000001AE  E8 00000380					call PrintRandomPhrase
							; Show math problem
 000001B3  B2 00					mov dl, 0
 000001B5  B6 05					mov dh, 5
 000001B7  E8 00000000 E				call Gotoxy
 000001BC  E8 00000396					call GenerateMathEquation
							; Read answer from user
 000001C1  B2 00					mov dl, 0
 000001C3  B6 0A					mov dh, 10
 000001C5  E8 00000000 E				call Gotoxy
 000001CA  E8 00000000 E				call ReadInt
 000001CF  71 0C					jno GoodInput

							;Write error message
 000001D1  E8 00000000 E				call WriteWindowsMsg
							exit

							; If input is good, check against equation answer
 000001DD						GoodInput:
 000001DD  3B 05 00002BBA R				cmp eax, equationAnswer
 000001E3  74 02					je CorrectAnswer

 000001E5  EB 2E					jmp IncorrectAnswer

 000001E7						CorrectAnswer: 
							; Write correct answer message, increase difficulty
 000001E7  8B 3D 00002BAE R				mov edi, starPos
 000001ED  C6 87 00000476 R				mov byte ptr [buffer + edi], ' '	; Change the star to a space
	   20
 000001F4  FE 0D 00002BB2 R				dec totalStars

 000001FA  B2 00					mov dl, 0
 000001FC  B6 0F					mov dh, 15
 000001FE  E8 00000000 E				call Gotoxy
 00000203  BA 000003CC R				mov edx, OFFSET correctAnswerString
 00000208  E8 00000000 E				call WriteString
 0000020D  FE 05 00002BB9 R				inc difficultyLevel
 00000213  EB 19					jmp AnswerChecked

 00000215						IncorrectAnswer:
							; Write incorrect answer message, decrease difficulty
 00000215  B2 00					mov dl, 0
 00000217  B6 0F					mov dh, 15
 00000219  E8 00000000 E				call Gotoxy
 0000021E  BA 0000042B R				mov edx, OFFSET incorrectAnswerString
 00000223  E8 00000000 E				call WriteString
 00000228  FE 0D 00002BB9 R				dec difficultyLevel

 0000022E						AnswerChecked:

							;update terms with difficulty level
 0000022E  8A 25 00002BB9 R				mov ah, difficultyLevel
 00000234  88 25 00002BBE R				mov terms, ah

							;Wait for key press before continuing
 0000023A						WaitLoop:
 0000023A  E8 00000000 E				call ReadKey
 0000023F  74 F9					jz WaitLoop

 00000241  E8 000001D3					call DrawWorld


 00000246					checkFail:
 00000246  E9 00000132					jmp RedrawDot	



					
					
 0000024B				MoveUp:
 0000024B  8A 25 00002BB8 R			mov ah, yPos
 00000251  80 FC 01				cmp ah, 1
 00000254  0F 8E 00000123			jle RedrawDot	; If dot cannot move, jump without decrementing

						GetBufferPos	; Put dot buffer position into edi
 0000025A  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 00000261  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 00000264  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 0000026B  8B DA	     1		mov ebx, edx
 0000026D  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000026F  8B D3	     1		mov edx, ebx
 00000271  8B F8	     1		mov edi, eax	; mov mul result back into edi
 00000273  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 0000027A  03 F8	     1		add edi, eax	; add x to edi to get proper index

 0000027C  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002BB5 R
 00000283  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 00000286  2B FB				sub edi, ebx 	; Move edi up one row to check above

 00000288  8A 87 00000476 R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

 0000028E  3C 20				cmp al, ' '
 00000290  0F 85 000000E7			jne RedrawDot	; If space to be moved into isn't empty, skip

 00000296  FE 0D 00002BB8 R			dec yPos	
 0000029C  E9 000000DC				jmp RedrawDot

 000002A1				MoveDown:
 000002A1  8A 25 00002BB8 R			mov ah, yPos
 000002A7  3A 25 00002BB6 R			cmp ah, [maxY]
 000002AD  0F 8D 000000CA			jge RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 000002B3  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 000002BA  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000002BD  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 000002C4  8B DA	     1		mov ebx, edx
 000002C6  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000002C8  8B D3	     1		mov edx, ebx
 000002CA  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000002CC  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 000002D3  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000002D5  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002BB5 R
 000002DC  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 000002DF  03 FB				add edi, ebx 	; Move edi down one row to check below

 000002E1  8A 87 00000476 R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

						
 000002E7  3C 20				cmp al, ' '
 000002E9  0F 85 0000008E			jne RedrawDot

 000002EF  FE 05 00002BB8 R			inc yPos
 000002F5  E9 00000083				jmp RedrawDot

 000002FA				MoveLeft:
 000002FA  8A 25 00002BB7 R			mov ah, xPos
 00000300  80 FC 01				cmp ah, 1
 00000303  7E 78				jle RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 00000305  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 0000030C  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000030F  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 00000316  8B DA	     1		mov ebx, edx
 00000318  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000031A  8B D3	     1		mov edx, ebx
 0000031C  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000031E  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 00000325  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000327  4F					dec edi			; move x left one to account for move

 00000328  8A 87 00000476 R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 0000032E  3C 20				cmp al, ' '
 00000330  75 4B				jne RedrawDot

 00000332  FE 0D 00002BB7 R			dec xPos
 00000338  EB 43				jmp RedrawDot

 0000033A				MoveRight:
 0000033A  8A 25 00002BB7 R			mov ah, xPos
 00000340  3A 25 00002BB5 R			cmp ah, [maxX]
 00000346  7D 35				jge RedrawDot

						GetBufferPos 	; Put dot buffer position into edi
 00000348  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 0000034F  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 00000352  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 00000359  8B DA	     1		mov ebx, edx
 0000035B  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000035D  8B D3	     1		mov edx, ebx
 0000035F  8B F8	     1		mov edi, eax	; mov mul result back into edi
 00000361  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 00000368  03 F8	     1		add edi, eax	; add x to edi to get proper index

 0000036A  47					inc edi			; move x right one to account for move

 0000036B  8A 87 00000476 R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 00000371  3C 20				cmp al, ' '
 00000373  75 08				jne RedrawDot

 00000375  FE 05 00002BB7 R			inc xPos
 0000037B  EB 00				jmp RedrawDot

 0000037D				RedrawDot:
 0000037D  8A 15 00002BB3 R			mov dl, oldX
 00000383  8A 35 00002BB4 R			mov dh, oldY
 00000389  E8 00000000 E			call Gotoxy
 0000038E  B0 20				mov al, ' '
 00000390  E8 00000000 E			call WriteChar	; Write space over old dot

 00000395  8A 15 00002BB7 R			mov dl, xPos
 0000039B  8A 35 00002BB8 R			mov dh, yPos
 000003A1  E8 00000000 E			call Gotoxy		; Go to new xy
 000003A6  B0 2E				mov al, '.'
 000003A8  E8 00000000 E			call WriteChar	; Write dot in new xy
						
 000003AD  C3				ret
 000003AE			MoveDot ENDP

 000003AE			PrepareWorld PROC
					; Open the file for reading
 000003AE  BA 0000046C R		mov edx, OFFSET filename      ; Pointer to filename
 000003B3  E8 00000000 E		call OpenInputFile                 ; OpenFile is used for reading; adjust if needed
 000003B8  A3 000017FE R		mov fileHandle, eax            ; Save file handle

					; Read from the file
 000003BD  A1 000017FE R		mov eax, fileHandle            ; File handle
 000003C2  BA 00000476 R		mov edx, OFFSET buffer         ; Buffer to store file data
 000003C7  B9 00001388			mov ecx, SIZEOF buffer         ; Max bytes to read
 000003CC  E8 00000000 E		call ReadFromFile              ; Read file content
 000003D1  A3 00001802 R		mov bytesRead, eax             ; Save the number of bytes read
 000003D6  72 02			jc   readError                 ; Jump if error occurred
 000003D8  EB 0C			jmp readSuccess

 000003DA				readError:
 000003DA  E8 00000000 E			call WriteWindowsMsg
						exit

 000003E6				readSuccess:

					; Close the file
 000003E6  A1 000017FE R		mov eax, fileHandle
 000003EB  E8 00000000 E		call CloseFile

 000003F0  C3				ret
 000003F1			PrepareWorld ENDP

 000003F1				CountStars PROC
 000003F1  33 FF				xor edi, edi                ; Clear edi for use as index
 000003F3  8B 0D 00001802 R			mov ecx, bytesRead          ; Length of the buffer to print

						; Clear Screen before drawing
 000003F9  E8 00000000 E			call Clrscr
 000003FE				CountLoop:
 000003FE  3B F9				cmp edi, ecx                ; Check if we've reached the end of the buffer
 00000400  74 16				je EndCount                  ; Jump to end if done

 00000402  8A 87 00000476 R			mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension
 00000408  3C 2A				cmp al, '*'
 0000040A  74 03				je CountStar

 0000040C  47					inc edi                     ; Move to the next character
 0000040D  EB EF				jmp CountLoop                ; Continue loop

 0000040F				CountStar:
 0000040F  FE 05 00002BB2 R			inc totalStars
 00000415  47					inc edi
 00000416  EB E6				jmp CountLoop

 00000418				EndCount:


 00000418  C3				ret
 00000419			CountStars ENDP

 00000419			DrawWorld PROC	
					;Buffer contains the worlds information
 00000419  33 FF			xor edi, edi                ; Clear edi for use as index
 0000041B  8B 0D 00001802 R	    mov ecx, bytesRead          ; Length of the buffer to print

					; Clear Screen before drawing
 00000421  E8 00000000 E		call Clrscr
 00000426			DrawLoop:
 00000426  3B F9		    cmp edi, ecx                ; Check if we've reached the end of the buffer
 00000428  74 14		    je EndDraw                  ; Jump to end if done

 0000042A  8A 87 00000476 R	    mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension

 00000430  3C 2A			cmp al, '*'
 00000432  74 02			je WriteYellow

 00000434  EB 00			jmp Write

 00000436				WriteYellow:



 00000436				Write:
 00000436  E8 00000000 E	    call WriteChar					; Write the character to the 


 0000043B  47			    inc edi                     ; Move to the next character
 0000043C  EB E8		    jmp DrawLoop                ; Continue loop

 0000043E			EndDraw:
 0000043E  C3			    ret

 0000043F			DrawWorld ENDP

 0000043F			DrawInfo PROC
 0000043F  B2 55			mov dl, 85
 00000441  B6 00			mov dh, 0
 00000443  E8 00000000 E		call Gotoxy
 00000448  0F B6 05			movzx eax, xPos
	   00002BB7 R
 0000044F  E8 00000000 E		call WriteInt

 00000454  B2 55			mov dl, 85
 00000456  B6 01			mov dh, 1
 00000458  E8 00000000 E		call Gotoxy
 0000045D  0F B6 05			movzx eax, yPos
	   00002BB8 R
 00000464  E8 00000000 E		call WriteInt

 00000469  B2 55			mov dl, 85
 0000046B  B6 02			mov dh, 2
 0000046D  E8 00000000 E		call Gotoxy

					GetBufferPos
 00000472  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BB5 R
 00000479  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000047C  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BB8 R
 00000483  8B DA	     1		mov ebx, edx
 00000485  F7 E7	     1		mul edi			; multiply y by max x to get right row
 00000487  8B D3	     1		mov edx, ebx
 00000489  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000048B  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BB7 R
 00000492  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000494  4F				dec edi
 00000495  8A 87 00000476 R		mov al, byte ptr [buffer + edi]
					
					;mWrite "Left: ", 0
					;call WriteChar

 0000049B  B2 55			mov dl, 85
 0000049D  B6 03			mov dh, 3
 0000049F  E8 00000000 E		call Gotoxy

 000004A4  47				inc edi
 000004A5  47				inc edi
 000004A6  8A 87 00000476 R		mov al, byte ptr [buffer + edi]

					;mWrite "Right: ", 0
					;call WriteChar


 000004AC  C3				ret
 000004AD			DrawInfo ENDP

 000004AD			PreparePhrases PROC
					; Open the file for reading
 000004AD  BA 00001806 R		mov edx, OFFSET phrasesfilename      ; Pointer to filename
 000004B2  E8 00000000 E		call OpenInputFile
 000004B7  A3 00002B9E R		mov phrasesfileHandle, eax

					; Read from the file
 000004BC  A1 00002B9E R		mov eax, phrasesfileHandle
 000004C1  BA 00001816 R		mov edx, OFFSET phrasesbuffer
 000004C6  B9 00001388			mov ecx, SIZEOF phrasesbuffer
 000004CB  E8 00000000 E		call ReadFromFile
 000004D0  A3 00002BA2 R		mov phrasesbytesRead, eax

					; Close the file
 000004D5  A1 00002B9E R		mov eax, phrasesfileHandle
 000004DA  E8 00000000 E		call CloseFile

 000004DF  C3				ret

					; phrasesbuffer contains the phrases information
 000004E0			PreparePhrases ENDP

 000004E0			GetRandomPhrase PROC
					; Get a random phrase
 000004E0  E8 00000000 E		call Randomize
 000004E5  B8 0000004F			mov eax, 79
 000004EA  E8 00000000 E		call RandomRange
 000004EF  8B D8			mov ebx, eax
 000004F1  43				inc ebx

					; ebx contains the randomly generated index

					; Find the phrase
 000004F2  33 FF			xor edi, edi
 000004F4  33 C9			xor ecx, ecx
					; ecx will contain the current phrase index

 000004F6				FindLoop:
						; Find the end of the buffer
 000004F6  3B 3D 00002BA2 R			cmp edi, phrasesbytesRead
 000004FC  74 34				je EndFind

						; If randomly generated index matches the current phrase index, we found the phrase
 000004FE  3B D9				cmp ebx, ecx
 00000500  74 0E				je FoundPhrase

						; Check for new line, if not skip to NotNewlineFind
 00000502  8A 87 00001816 R			mov al, byte ptr [phrasesbuffer + edi]
 00000508  3C 0A				cmp al, 0ah ; New line
 0000050A  75 01				jne NotNewLineFind

						; Increment the phrase index
 0000050C  41					inc ecx

 0000050D				NotNewlineFind:
 0000050D  47					inc edi			; Increment edi to show a character was read
 0000050E  EB E6				jmp FindLoop

 00000510				FoundPhrase:
						; Save the start of the phrase
 00000510  89 3D 00002BA6 R			mov phraseStart, edi

						; Find the end of the phrase
 00000516					FindEnd:
 00000516  3B 3D 00002BA2 R				cmp edi, phrasesbytesRead	; Check if we've reached the end of the buffer
 0000051C  74 0D					je FinishFind ; Jump to finish if done

 0000051E  8A 87 00001816 R				mov al, byte ptr [phrasesbuffer + edi] ; Move the current character to al
 00000524  47						inc edi ; Move to the next character
 00000525  3C 0A					cmp al, 0ah ; New line
 00000527  74 02					je FinishFind

 00000529  EB EB					jmp FindEnd

 0000052B						FinishFind:
							; Save the end of the phrase
 0000052B  4F						dec edi ; Move back one to get the last character of the phrase
 0000052C  89 3D 00002BAA R				mov phraseEnd, edi ; Save the end

 00000532				EndFind:
 00000532  C3				ret

 00000533			GetRandomPhrase ENDP

 00000533			PrintRandomPhrase PROC
 00000533  E8 FFFFFFA8			call GetRandomPhrase

 00000538  8B 3D 00002BA6 R		mov edi, phraseStart
 0000053E  8B 0D 00002BAA R		mov ecx, phraseEnd

 00000544				PrintLoop:
 00000544  3B F9			    cmp edi, ecx	; Check if we've reached the end of the phrase
 00000546  74 0E				je EndPrint		; Jump to end if done

 00000548  8A 87 00001816 R			mov al, byte ptr [phrasesbuffer + edi]	; Move the current character to al
 0000054E  E8 00000000 E			call WriteChar							; Write the character to the screen

 00000553  47					inc edi			; Move to the next character
 00000554  EB EE				jmp PrintLoop	; Continue loop

 00000556				EndPrint:
 00000556  C3				ret

 00000557			PrintRandomPhrase ENDP

 00000557			GenerateMathEquation PROC
					; Clear the equation buffer
 00000557  BF 00002BC1 R		mov edi, OFFSET equationBuffer	; Move the offset of the equation buffer into edi
 0000055C  B9 00001388			mov ecx, SIZEOF equationBuffer	; Move the size of the equation buffer into ecx
 00000561  B0 00			mov al, 0	; Move 0 into al
 00000563  F3/ AA			rep stosb	; Fill the buffer with 0

					; Clear the equation answer
 00000565  C7 05 00002BBA R		mov equationAnswer, 0
	   00000000

					; Generate first term
 0000056F  E8 00000000 E		call Randomize
 00000574  B8 00000009			mov eax, 9					; 9 is the maximum value for a term
 00000579  E8 00000000 E		call RandomRange
 0000057E  40				inc eax						; Increment eax to get a number between 1 and 9

					; Store term into buffer
 0000057F  A2 00002BC0 R		mov term, al				; Store the random number into term
 00000584  A0 00002BC0 R		mov al, term				; Move the term number into al
 00000589  04 30			add al, 48					; Convert the number to ASCII
 0000058B  88 07			mov [edi], al				; Move the first term into buffer
 0000058D  47				inc edi						; Move to the next position in the equation buffer

					; Store term into Equation Answer
 0000058E  0F B6 05			movzx eax, term				; Move the term into eax
	   00002BC0 R
 00000595  A3 00002BBA R		mov equationAnswer, eax	; Move the first term into the answer
 0000059A  FE C1			inc cl						; Increment the counter

					; Prepare counter
 0000059C  B1 01			mov cl, 1

					; Generate the terms
 0000059E				GenerateTerms:
						; Call small delay for time slicing
 0000059E  B8 0000000A				mov eax, 10
 000005A3  E8 00000000 E			call Delay
						; Generate a term
 000005A8  E8 00000000 E			call Randomize
 000005AD  B8 00000009				mov eax, 9		; 9 is the maximum value for a term
 000005B2  E8 00000000 E			call RandomRange
 000005B7  40					inc eax			; Increment eax to get a number between 1 and 9
 000005B8  A2 00002BC0 R			mov term, al	; Move the term number into term


 000005BD  E8 00000000 E			call Randomize
 000005C2  B8 00000003				mov eax, 3			; 3 is the maximum number of operators
 000005C7  E8 00000000 E			call RandomRange	; Generate a random operator number between 1 and 3 in eax
 000005CC  40					inc eax				; Increment eax to get a number between 1 and 3
 000005CD  A2 00002BBF R			mov operator, al	; Move the operator number into variable
					

						; Add the operator to the equation buffer
						.IF operator == 1
 000005DB  C6 07 20					mov BYTE PTR [edi], ' '
 000005DE  C6 47 01 2B					mov BYTE PTR [edi+1], '+'
 000005E2  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 000005E6  0F B6 05					movzx eax, term				; Move the term into eax
	   00002BC0 R
 000005ED  01 05 00002BBA R				add equationAnswer, eax		; Add the term to the answer
						.ELSEIF operator == 2
 000005FE  C6 07 20					mov BYTE PTR [edi], ' '
 00000601  C6 47 01 2D					mov BYTE PTR [edi+1], '-'
 00000605  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000609  A2 00002BC0 R				mov term, al				; Move the term into al
 0000060E  0F B6 05					movzx eax, term				; Move the term into eax
	   00002BC0 R
 00000615  29 05 00002BBA R				sub equationAnswer, eax		; Subtract the term from the answer
						.ELSEIF operator == 3
 00000626  C6 07 20					mov BYTE PTR [edi], ' '
 00000629  C6 47 01 2A					mov BYTE PTR [edi+1], '*'
 0000062D  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000631  0F B6 1D					movzx ebx, term				; Move the term into ebx
	   00002BC0 R
 00000638  A1 00002BBA R				mov eax, equationAnswer		; Move the answer into eax
 0000063D  F7 E3					mul ebx						; Multiply the term by the answer
 0000063F  A3 00002BBA R				mov equationAnswer, eax		; Move the result into the equation answer
						.ENDIF

						; Add the term to the equation buffer
 00000644  83 C7 03				add edi, 3					; Move to the end of the equation buffer
 00000647  A0 00002BC0 R			mov al, term 				; Move the term into al
 0000064C  04 30				add al, 48 					; Convert the number to ASCII
 0000064E  88 07				mov [edi], al				; Move the term into the equation buffer
 00000650  47					inc edi						; Move to the next position in the equation buffer

						; Increment the counter and check if we've reached the number of terms
 00000651  FE C1				inc cl
 00000653  3A 0D 00002BBE R			cmp cl, terms
 00000659  0F 8C FFFFFF3F			jl GenerateTerms

						; Add the equals sign to the equation buffer
 0000065F  C6 07 20				mov BYTE PTR [edi], ' '
 00000662  C6 47 01 3D				mov BYTE PTR [edi+1], '='
 00000666  C6 47 02 20				mov BYTE PTR [edi+2], ' '
 0000066A  C6 47 03 3F		        mov BYTE PTR [edi+3], '?'
 0000066E  83 C7 04				add edi, 4

						; Print the equation
 00000671  B9 00002BC1 R			mov ecx, OFFSET equationBuffer
						
 00000676					PrintLoop:
 00000676  3B F9				cmp edi, ecx	; Check if we've reached the end of the equation
 00000678  74 0A				je EndPrint		; Jump to end if done

 0000067A  8A 01				mov al, byte ptr [ecx]	; Move the current character to al
 0000067C  E8 00000000 E			call WriteChar							; Write the character to the screen
						
 00000681  41					inc ecx
 00000682  EB F2				jmp PrintLoop

 00000684					EndPrint:
 00000684  C3				ret

 00000685			GenerateMathEquation ENDP

				END main
Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/02/24 09:01:19
runner.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

GetBufferPos . . . . . . . . . .	Proc
IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003F49 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000685 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CountStars . . . . . . . . . . .	P Near	 000003F1 _TEXT	Length= 00000028 Public STDCALL
  CountLoop  . . . . . . . . . .	L Near	 000003FE _TEXT	
  CountStar  . . . . . . . . . .	L Near	 0000040F _TEXT	
  EndCount . . . . . . . . . . .	L Near	 00000418 _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayOutro . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 0000001B Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 00000067 _TEXT	
DrawInfo . . . . . . . . . . . .	P Near	 0000043F _TEXT	Length= 0000006E Public STDCALL
DrawWorld  . . . . . . . . . . .	P Near	 00000419 _TEXT	Length= 00000026 Public STDCALL
  DrawLoop . . . . . . . . . . .	L Near	 00000426 _TEXT	
  WriteYellow  . . . . . . . . .	L Near	 00000436 _TEXT	
  Write  . . . . . . . . . . . .	L Near	 00000436 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 0000043E _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateMathEquation . . . . . .	P Near	 00000557 _TEXT	Length= 0000012E Public STDCALL
  GenerateTerms  . . . . . . . .	L Near	 0000059E _TEXT	
  PrintLoop  . . . . . . . . . .	L Near	 00000676 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 00000684 _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRandomPhrase  . . . . . . . .	P Near	 000004E0 _TEXT	Length= 00000053 Public STDCALL
  FindLoop . . . . . . . . . . .	L Near	 000004F6 _TEXT	
  NotNewlineFind . . . . . . . .	L Near	 0000050D _TEXT	
  FoundPhrase  . . . . . . . . .	L Near	 00000510 _TEXT	
  FindEnd  . . . . . . . . . . .	L Near	 00000516 _TEXT	
  FinishFind . . . . . . . . . .	L Near	 0000052B _TEXT	
  EndFind  . . . . . . . . . . .	L Near	 00000532 _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 0000008E _TEXT	Length= 00000021 Public STDCALL
  hConsole . . . . . . . . . . .	DWord	 bp - 00000004
InitDotPosition  . . . . . . . .	P Near	 000000C6 _TEXT	Length= 0000001E Public STDCALL
IntroScreen  . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 00000017 Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 000000BE _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDot  . . . . . . . . . . . .	P Near	 000000E4 _TEXT	Length= 000002CA Public STDCALL
  CheckStar  . . . . . . . . . .	L Near	 00000135 _TEXT	
  checkPass  . . . . . . . . . .	L Near	 0000019A _TEXT	
  GoodInput  . . . . . . . . . .	L Near	 000001DD _TEXT	
  CorrectAnswer  . . . . . . . .	L Near	 000001E7 _TEXT	
  IncorrectAnswer  . . . . . . .	L Near	 00000215 _TEXT	
  AnswerChecked  . . . . . . . .	L Near	 0000022E _TEXT	
  WaitLoop . . . . . . . . . . .	L Near	 0000023A _TEXT	
  checkFail  . . . . . . . . . .	L Near	 00000246 _TEXT	
  MoveUp . . . . . . . . . . . .	L Near	 0000024B _TEXT	
  MoveDown . . . . . . . . . . .	L Near	 000002A1 _TEXT	
  MoveLeft . . . . . . . . . . .	L Near	 000002FA _TEXT	
  MoveRight  . . . . . . . . . .	L Near	 0000033A _TEXT	
  RedrawDot  . . . . . . . . . .	L Near	 0000037D _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PreparePhrases . . . . . . . . .	P Near	 000004AD _TEXT	Length= 00000033 Public STDCALL
PrepareWorld . . . . . . . . . .	P Near	 000003AE _TEXT	Length= 00000043 Public STDCALL
  readError  . . . . . . . . . .	L Near	 000003DA _TEXT	
  readSuccess  . . . . . . . . .	L Near	 000003E6 _TEXT	
PrintRandomPhrase  . . . . . . .	P Near	 00000533 _TEXT	Length= 00000024 Public STDCALL
  PrintLoop  . . . . . . . . . .	L Near	 00000544 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 00000556 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 0000001F Public STDCALL
  hConsole . . . . . . . . . . .	DWord	 bp - 00000004
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000054 Public STDCALL
  game . . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  Outro  . . . . . . . . . . . .	L Near	 00000048 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000476 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00001802 _DATA	
correctAnswerString  . . . . . .	Byte	 000003CC _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difficultyLevel  . . . . . . . .	Byte	 00002BB9 _DATA	
equationAnswer . . . . . . . . .	DWord	 00002BBA _DATA	
equationBuffer . . . . . . . . .	Byte	 00002BC1 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 000017FE _DATA	
filename . . . . . . . . . . . .	Byte	 0000046C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectAnswerString  . . . . .	Byte	 0000042B _DATA	
introString  . . . . . . . . . .	Byte	 000000AC _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxX . . . . . . . . . . . . . .	Byte	 00002BB5 _DATA	
maxY . . . . . . . . . . . . . .	Byte	 00002BB6 _DATA	
oldX . . . . . . . . . . . . . .	Byte	 00002BB3 _DATA	
oldY . . . . . . . . . . . . . .	Byte	 00002BB4 _DATA	
operator . . . . . . . . . . . .	Byte	 00002BBF _DATA	
outroString  . . . . . . . . . .	Byte	 00000008 _DATA	
phraseEnd  . . . . . . . . . . .	DWord	 00002BAA _DATA	
phraseStart  . . . . . . . . . .	DWord	 00002BA6 _DATA	
phrasesbuffer  . . . . . . . . .	Byte	 00001816 _DATA	
phrasesbytesRead . . . . . . . .	DWord	 00002BA2 _DATA	
phrasesfileHandle  . . . . . . .	DWord	 00002B9E _DATA	
phrasesfilename  . . . . . . . .	Byte	 00001806 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
starPos  . . . . . . . . . . . .	DWord	 00002BAE _DATA	
terms  . . . . . . . . . . . . .	Byte	 00002BBE _DATA	
term . . . . . . . . . . . . . .	Byte	 00002BC0 _DATA	
totalStars . . . . . . . . . . .	Byte	 00002BB2 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos . . . . . . . . . . . . . .	Byte	 00002BB7 _DATA	
yPos . . . . . . . . . . . . . .	Byte	 00002BB8 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
