Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/01/24 17:06:29
runner.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 57 65 6C 63 6F	introString db "Welcome to... ", 0Dh, 0Ah, 0Dh, 0Ah
	   6D 65 20 74 6F
	   2E 2E 2E 20 0D
	   0A 0D 0A

 00000012  20 20 5F 5F 20				db "  __  __    _  _____ _   _ _____ __  __  ___  _   _ ___ _   _ __  __ ", 0Dh, 0Ah
	   20 5F 5F 20 20
	   20 20 5F 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   20 20 5F 5F 20
	   20 5F 5F 5F 20
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 20
	   20 5F 5F 20 0D
	   0A
 00000059  20 7C 20 20 5C				db " |  \/  |  / \|_   _| | | | ____|  \/  |/ _ \| \ | |_ _| | | |  \/  |", 0Dh, 0Ah
	   2F 20 20 7C 20
	   20 2F 20 5C 7C
	   5F 20 20 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 5F 5F
	   5F 5F 7C 20 20
	   5C 2F 20 20 7C
	   2F 20 5F 20 5C
	   7C 20 5C 20 7C
	   20 7C 5F 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 20 5C
	   2F 20 20 7C 0D
	   0A
 000000A0  20 7C 20 7C 5C				db " | |\/| | / _ \ | | | |_| |  _| | |\/| | | | |  \| || || | | | |\/| |", 0Dh, 0Ah
	   2F 7C 20 7C 20
	   2F 20 5F 20 5C
	   20 7C 20 7C 20
	   7C 20 7C 5F 7C
	   20 7C 20 20 5F
	   7C 20 7C 20 7C
	   5C 2F 7C 20 7C
	   20 7C 20 7C 20
	   7C 20 20 5C 7C
	   20 7C 7C 20 7C
	   7C 20 7C 20 7C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 0D
	   0A
 000000E7  20 7C 20 7C 20				db " | |  | |/ ___ \| | |  _  | |___| |  | | |_| | |\  || || |_| | |  | |", 0Dh, 0Ah
	   20 7C 20 7C 2F
	   20 5F 5F 5F 20
	   5C 7C 20 7C 20
	   7C 20 20 5F 20
	   20 7C 20 7C 5F
	   5F 5F 7C 20 7C
	   20 20 7C 20 7C
	   20 7C 5F 7C 20
	   7C 20 7C 5C 20
	   20 7C 7C 20 7C
	   7C 20 7C 5F 7C
	   20 7C 20 7C 20
	   20 7C 20 7C 0D
	   0A
 0000012E  20 7C 5F 7C 20				db " |_|  |_/_/   \_\_| |_| |_|_____|_|  |_|\___/|_| \_|___|\___/|_|  |_|", 0Dh, 0Ah, 0Dh, 0Ah
	   20 7C 5F 2F 5F
	   2F 20 20 20 5C
	   5F 5C 5F 7C 20
	   7C 5F 7C 20 7C
	   5F 7C 5F 5F 5F
	   5F 5F 7C 5F 7C
	   20 20 7C 5F 7C
	   5C 5F 5F 5F 2F
	   7C 5F 7C 20 5C
	   5F 7C 5F 5F 5F
	   7C 5C 5F 5F 5F
	   2F 7C 5F 7C 20
	   20 7C 5F 7C 0D
	   0A 0D 0A


 00000177  61 20 67 61 6D				db "a game of math and adventure!", 0Dh, 0Ah
	   65 20 6F 66 20
	   6D 61 74 68 20
	   61 6E 64 20 61
	   64 76 65 6E 74
	   75 72 65 21 0D
	   0A
 00000196  54 72 61 76 65				db "Travel through the world and challenge all the math masters.... if you dare....", 0Dh, 0Ah, 0Dh, 0ah
	   6C 20 74 68 72
	   6F 75 67 68 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   61 6E 64 20 63
	   68 61 6C 6C 65
	   6E 67 65 20 61
	   6C 6C 20 74 68
	   65 20 6D 61 74
	   68 20 6D 61 73
	   74 65 72 73 2E
	   2E 2E 2E 20 69
	   66 20 79 6F 75
	   20 64 61 72 65
	   2E 2E 2E 2E 0D
	   0A 0D 0A
 000001E9  54 49 50 53 20				db "TIPS & INFO:", 0Dh, 0Ah
	   26 20 49 4E 46
	   4F 3A 0D 0A
 000001F7  20 2D 20 41 73				db " - Asterisks (*) represent a math master, go up and press space to begin battle", 0Dh, 0Ah
	   74 65 72 69 73
	   6B 73 20 28 2A
	   29 20 72 65 70
	   72 65 73 65 6E
	   74 20 61 20 6D
	   61 74 68 20 6D
	   61 73 74 65 72
	   2C 20 67 6F 20
	   75 70 20 61 6E
	   64 20 70 72 65
	   73 73 20 73 70
	   61 63 65 20 74
	   6F 20 62 65 67
	   69 6E 20 62 61
	   74 74 6C 65 0D
	   0A
 00000248  20 2D 20 59 6F				db " - You may want to get some questions wrong here and there, as you win, difficulty and terms per question increase", 0Dh, 0Ah
	   75 20 6D 61 79
	   20 77 61 6E 74
	   20 74 6F 20 67
	   65 74 20 73 6F
	   6D 65 20 71 75
	   65 73 74 69 6F
	   6E 73 20 77 72
	   6F 6E 67 20 68
	   65 72 65 20 61
	   6E 64 20 74 68
	   65 72 65 2C 20
	   61 73 20 79 6F
	   75 20 77 69 6E
	   2C 20 64 69 66
	   66 69 63 75 6C
	   74 79 20 61 6E
	   64 20 74 65 72
	   6D 73 20 70 65
	   72 20 71 75 65
	   73 74 69 6F 6E
	   20 69 6E 63 72
	   65 61 73 65 0D
	   0A
 000002BC  20 2D 20 50 45				db " - PEMDAS will not work here, equations are evaluated left to right", 0Dh, 0Ah
	   4D 44 41 53 20
	   77 69 6C 6C 20
	   6E 6F 74 20 77
	   6F 72 6B 20 68
	   65 72 65 2C 20
	   65 71 75 61 74
	   69 6F 6E 73 20
	   61 72 65 20 65
	   76 61 6C 75 61
	   74 65 64 20 6C
	   65 66 74 20 74
	   6F 20 72 69 67
	   68 74 0D 0A
 00000301  50 72 65 73 73				db "Press any key to continue...", 0Dh, 0Ah, 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 0D 0A
	   00
						

 00000320 43 6F 72 72 65	correctAnswerString db "Correct! Math masters hear your name world wide and prepare in anticipation of your arrival...", 0
	   63 74 21 20 4D
	   61 74 68 20 6D
	   61 73 74 65 72
	   73 20 68 65 61
	   72 20 79 6F 75
	   72 20 6E 61 6D
	   65 20 77 6F 72
	   6C 64 20 77 69
	   64 65 20 61 6E
	   64 20 70 72 65
	   70 61 72 65 20
	   69 6E 20 61 6E
	   74 69 63 69 70
	   61 74 69 6F 6E
	   20 6F 66 20 79
	   6F 75 72 20 61
	   72 72 69 76 61
	   6C 2E 2E 2E 00
 0000037F 49 6E 63 6F 72	incorrectAnswerString db "Incorrect! The world is doomed to a future of math illiteracy...", 0
	   72 65 63 74 21
	   20 54 68 65 20
	   77 6F 72 6C 64
	   20 69 73 20 64
	   6F 6F 6D 65 64
	   20 74 6F 20 61
	   20 66 75 74 75
	   72 65 20 6F 66
	   20 6D 61 74 68
	   20 69 6C 6C 69
	   74 65 72 61 63
	   79 2E 2E 2E 00

 000003C0 77 6F 72 6C 64	filename BYTE "world.txt",0
	   2E 74 78 74 00
 000003CA  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 00001752 00000000		fileHandle DWORD ?
 00001756 00000000		bytesRead DWORD ?

 0000175A 6D 61 74 68 70	phrasesfilename BYTE "mathphrases.txt",0
	   68 72 61 73 65
	   73 2E 74 78 74
	   00
 0000176A  00001388 [		phrasesbuffer BYTE 5000 DUP(?)
	    00
	   ]
 00002AF2 00000000		phrasesfileHandle DWORD ?
 00002AF6 00000000		phrasesbytesRead DWORD ?
 00002AFA 00000000		phraseStart DWORD ?
 00002AFE 00000000		phraseEnd DWORD ?

 00002B02 00			oldX BYTE ?
 00002B03 00			oldY BYTE ?
 00002B04 50			maxX BYTE 80
 00002B05 19			maxY BYTE 25
 00002B06 01			xPos BYTE 1
 00002B07 01			yPos BYTE 1

 00002B08 02			difficultyLevel BYTE 2

 00002B09 00000000		equationAnswer DWORD ?			; Variable to store the answer to the equation
 00002B0D 00			terms BYTE ?					; Number of terms in the equation
 00002B0E 00			operator BYTE ?					; Equation operator code
 00002B0F 00			term BYTE ?						; Equation term
 00002B10  00001388 [		equationBuffer BYTE 5000 DUP(?) ; Buffer to store the equation
	    00
	   ]

				; Macro to put buffer position into edi
				GetBufferPos MACRO
					movzx eax, maxX	; move max X into eax
					add eax, 2		; add 2 to account for new line characters
					movzx edi, yPos	; move y into edi
					mov ebx, edx
					mul edi			; multiply y by max x to get right row
					mov edx, ebx
					mov edi, eax	; mov mul result back into edi
					movzx eax, xPos	; zero extend xpos to add to edi
					add edi, eax	; add x to edi to get proper index
					ENDM

 00000000			.code
 00000000			main PROC
					
					
 00000000  E8 00000410			call PreparePhrases

 00000005  E8 0000002B			call IntroScreen

 0000000A  E8 0000030C			call DrawWorld
 0000000F  E8 00000038			call InitDotPosition
					
 00000014  B2 55			mov dl, 85
 00000016  B6 05			mov dh, 5
 00000018  E8 00000000 E		call Gotoxy

					
 0000001D				game:
 0000001D  B8 00000010				mov eax, 16
 00000022  E8 00000000 E			call Delay
						;call DrawInfo
 00000027  E8 0000003E				call MoveDot
 0000002C  EB EF			jmp game

					exit
 00000035			main ENDP

 00000035			IntroScreen PROC
					; Clear screen and write intro message
 00000035  E8 00000000 E		call Clrscr
 0000003A  BA 00000000 R		mov edx, OFFSET introString
 0000003F  E8 00000000 E		call WriteString


					;Wait for key press before exiting intro screen
 00000044				WaitLoop:
 00000044  E8 00000000 E		call ReadKey
 00000049  74 F9			jz WaitLoop

 0000004B  C3				ret
 0000004C			IntroScreen ENDP

 0000004C			InitDotPosition PROC
 0000004C  BA 00000000			mov edx, 0
 00000051  8A 15 00002B06 R		mov dl ,xPos
 00000057  8A 35 00002B07 R		mov dh, yPos
 0000005D  E8 00000000 E		call Gotoxy
 00000062  B0 2E			mov al, '.'
 00000064  E8 00000000 E		call WriteChar
 00000069  C3				ret
 0000006A			InitDotPosition ENDP

 0000006A			MoveDot PROC
 0000006A  E8 00000000 E		call ReadKey
 0000006F  0F 84 00000275		jz RedrawDot

					; Save old position
 00000075  8A 15 00002B06 R		mov dl, xPos
 0000007B  88 15 00002B02 R		mov oldX, dl
 00000081  8A 35 00002B07 R		mov dh, yPos
 00000087  88 35 00002B03 R		mov oldY, dh

					; Check direction based on virtual scan code (AH)
 0000008D  80 FC 48		    cmp  ah, 48h        ; Up arrow
 00000090  0F 84 00000122	    je   MoveUp
 00000096  80 FC 50		    cmp  ah, 50h        ; Down arrow
 00000099  0F 84 0000016F	    je   MoveDown
 0000009F  80 FC 4B		    cmp  ah, 4Bh        ; Left arrow
 000000A2  0F 84 000001BF	    je   MoveLeft
 000000A8  80 FC 4D		    cmp  ah, 4Dh        ; Right arrow
 000000AB  0F 84 000001F6	    je   MoveRight
 000000B1  80 FC 39			cmp  ah, 39h		; Space
 000000B4  74 05		          	je	 CheckStar
					
 000000B6  E9 0000022F			jmp RedrawDot			; Check for new input if none matched

 000000BB				CheckStar:
						; Check if the dot is next to a star
						GetBufferPos
 000000BB  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 000000C2  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000000C5  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 000000CC  8B DA	     1		mov ebx, edx
 000000CE  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000000D0  8B D3	     1		mov edx, ebx
 000000D2  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000000D4  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 000000DB  03 F8	     1		add edi, eax	; add x to edi to get proper index

						; Place length of one row into eax
 000000DD  0F B6 1D				movzx ebx, maxX	; move max X into eax
	   00002B04 R
 000000E4  83 C3 02				add ebx, 2		; add 2 to account for new line characters

						; Check Above
 000000E7  2B FB				sub edi, ebx	; subtract by one row to check above
 000000E9  8A 87 000003CA R			mov al, byte ptr [buffer + edi]
 000000EF  3C 2A				cmp al, '*'
 000000F1  74 2D				je checkPass

 000000F3  03 FB				add edi, ebx	; add back to edi to return to original position


						; Check Below
 000000F5  03 FB				add edi, ebx	; add one row to check below
 000000F7  8A 87 000003CA R			mov al, byte ptr [buffer + edi]
 000000FD  3C 2A				cmp al, '*'
 000000FF  74 1F				je checkPass

 00000101  2B FB				sub edi, ebx	; subtract by one row to return to original position


						; Check Left
 00000103  4F					dec edi			; move x left one to check left
 00000104  8A 87 000003CA R			mov al, byte ptr [buffer + edi]
 0000010A  3C 2A				cmp al, '*'
 0000010C  74 12				je checkPass

 0000010E  47					inc edi 		; add back to edi to return to original position


						; Check Right
 0000010F  47					inc edi			; move x right one to check right
 00000110  8A 87 000003CA R			mov al, byte ptr [buffer + edi]
 00000116  3C 2A				cmp al, '*'
 00000118  74 06				je checkPass

 0000011A  4F					dec edi			; subtract by one row to return to original position

						
 0000011B  E9 00000093				jmp checkFail

 00000120					checkPass:
							; Clear screen, write battle message, show math problem
 00000120  E8 00000000 E				call Clrscr
							; Move cursor to top left corner
 00000125  B2 00					mov dl, 0
 00000127  B6 00					mov dh, 0
 00000129  E8 00000000 E				call Gotoxy
							; Write battle message
 0000012E  E8 00000368					call PrintRandomPhrase
							; Show math problem
 00000133  B2 00					mov dl, 0
 00000135  B6 05					mov dh, 5
 00000137  E8 00000000 E				call Gotoxy
 0000013C  E8 0000037E					call GenerateMathEquation
							; Read answer from user
 00000141  B2 00					mov dl, 0
 00000143  B6 0A					mov dh, 10
 00000145  E8 00000000 E				call Gotoxy
 0000014A  E8 00000000 E				call ReadInt
 0000014F  71 0C					jno GoodInput

							;Write error message
 00000151  E8 00000000 E				call WriteWindowsMsg
							exit

							; If input is good, check against equation answer
 0000015D						GoodInput:
 0000015D  3B 05 00002B09 R				cmp eax, equationAnswer
 00000163  74 02					je CorrectAnswer

 00000165  EB 1B					jmp IncorrectAnswer

 00000167						CorrectAnswer: 
							; Write correct answer message, increase difficulty
 00000167  B2 00					mov dl, 0
 00000169  B6 0F					mov dh, 15
 0000016B  E8 00000000 E				call Gotoxy
 00000170  BA 00000320 R				mov edx, OFFSET correctAnswerString
 00000175  E8 00000000 E				call WriteString
 0000017A  FE 05 00002B08 R				inc difficultyLevel
 00000180  EB 19					jmp AnswerChecked

 00000182						IncorrectAnswer:
							; Write incorrect answer message, decrease difficulty
 00000182  B2 00					mov dl, 0
 00000184  B6 0F					mov dh, 15
 00000186  E8 00000000 E				call Gotoxy
 0000018B  BA 0000037F R				mov edx, OFFSET incorrectAnswerString
 00000190  E8 00000000 E				call WriteString
 00000195  FE 0D 00002B08 R				dec difficultyLevel

 0000019B						AnswerChecked:

							;update terms with difficulty level
 0000019B  8A 25 00002B08 R				mov ah, difficultyLevel
 000001A1  88 25 00002B0D R				mov terms, ah

							;Wait for key press before continuing
 000001A7						WaitLoop:
 000001A7  E8 00000000 E				call ReadKey
 000001AC  74 F9					jz WaitLoop

 000001AE  E8 00000168					call DrawWorld


 000001B3					checkFail:
 000001B3  E9 00000132					jmp RedrawDot	



					
					
 000001B8				MoveUp:
 000001B8  8A 25 00002B07 R			mov ah, yPos
 000001BE  80 FC 01				cmp ah, 1
 000001C1  0F 8E 00000123			jle RedrawDot	; If dot cannot move, jump without decrementing

						GetBufferPos	; Put dot buffer position into edi
 000001C7  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 000001CE  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000001D1  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 000001D8  8B DA	     1		mov ebx, edx
 000001DA  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000001DC  8B D3	     1		mov edx, ebx
 000001DE  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000001E0  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 000001E7  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000001E9  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002B04 R
 000001F0  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 000001F3  2B FB				sub edi, ebx 	; Move edi up one row to check above

 000001F5  8A 87 000003CA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

 000001FB  3C 20				cmp al, ' '
 000001FD  0F 85 000000E7			jne RedrawDot	; If space to be moved into isn't empty, skip

 00000203  FE 0D 00002B07 R			dec yPos	
 00000209  E9 000000DC				jmp RedrawDot

 0000020E				MoveDown:
 0000020E  8A 25 00002B07 R			mov ah, yPos
 00000214  3A 25 00002B05 R			cmp ah, [maxY]
 0000021A  0F 8D 000000CA			jge RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 00000220  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 00000227  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000022A  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 00000231  8B DA	     1		mov ebx, edx
 00000233  F7 E7	     1		mul edi			; multiply y by max x to get right row
 00000235  8B D3	     1		mov edx, ebx
 00000237  8B F8	     1		mov edi, eax	; mov mul result back into edi
 00000239  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 00000240  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000242  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002B04 R
 00000249  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 0000024C  03 FB				add edi, ebx 	; Move edi down one row to check below

 0000024E  8A 87 000003CA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

						
 00000254  3C 20				cmp al, ' '
 00000256  0F 85 0000008E			jne RedrawDot

 0000025C  FE 05 00002B07 R			inc yPos
 00000262  E9 00000083				jmp RedrawDot

 00000267				MoveLeft:
 00000267  8A 25 00002B06 R			mov ah, xPos
 0000026D  80 FC 01				cmp ah, 1
 00000270  7E 78				jle RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 00000272  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 00000279  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000027C  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 00000283  8B DA	     1		mov ebx, edx
 00000285  F7 E7	     1		mul edi			; multiply y by max x to get right row
 00000287  8B D3	     1		mov edx, ebx
 00000289  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000028B  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 00000292  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000294  4F					dec edi			; move x left one to account for move

 00000295  8A 87 000003CA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 0000029B  3C 20				cmp al, ' '
 0000029D  75 4B				jne RedrawDot

 0000029F  FE 0D 00002B06 R			dec xPos
 000002A5  EB 43				jmp RedrawDot

 000002A7				MoveRight:
 000002A7  8A 25 00002B06 R			mov ah, xPos
 000002AD  3A 25 00002B04 R			cmp ah, [maxX]
 000002B3  7D 35				jge RedrawDot

						GetBufferPos 	; Put dot buffer position into edi
 000002B5  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 000002BC  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000002BF  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 000002C6  8B DA	     1		mov ebx, edx
 000002C8  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000002CA  8B D3	     1		mov edx, ebx
 000002CC  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000002CE  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 000002D5  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000002D7  47					inc edi			; move x right one to account for move

 000002D8  8A 87 000003CA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 000002DE  3C 20				cmp al, ' '
 000002E0  75 08				jne RedrawDot

 000002E2  FE 05 00002B06 R			inc xPos
 000002E8  EB 00				jmp RedrawDot

 000002EA				RedrawDot:
 000002EA  8A 15 00002B02 R			mov dl, oldX
 000002F0  8A 35 00002B03 R			mov dh, oldY
 000002F6  E8 00000000 E			call Gotoxy
 000002FB  B0 20				mov al, ' '
 000002FD  E8 00000000 E			call WriteChar	; Write space over old dot

 00000302  8A 15 00002B06 R			mov dl, xPos
 00000308  8A 35 00002B07 R			mov dh, yPos
 0000030E  E8 00000000 E			call Gotoxy		; Go to new xy
 00000313  B0 2E				mov al, '.'
 00000315  E8 00000000 E			call WriteChar	; Write dot in new xy
						
 0000031A  C3				ret
 0000031B			MoveDot ENDP

 0000031B			DrawWorld PROC

					; Open the file for reading
 0000031B  BA 000003C0 R		mov edx, OFFSET filename      ; Pointer to filename
 00000320  E8 00000000 E		call OpenInputFile                 ; OpenFile is used for reading; adjust if needed
 00000325  A3 00001752 R		mov fileHandle, eax            ; Save file handle

					; Read from the file
 0000032A  A1 00001752 R		mov eax, fileHandle            ; File handle
 0000032F  BA 000003CA R		mov edx, OFFSET buffer         ; Buffer to store file data
 00000334  B9 00001388			mov ecx, SIZEOF buffer         ; Max bytes to read
 00000339  E8 00000000 E		call ReadFromFile              ; Read file content
 0000033E  A3 00001756 R		mov bytesRead, eax             ; Save the number of bytes read
 00000343  72 02			jc   readError                 ; Jump if error occurred
 00000345  EB 0C			jmp readSuccess

 00000347				readError:
 00000347  E8 00000000 E			call WriteWindowsMsg
						exit

 00000353				readSuccess:

					; Close the file
 00000353  A1 00001752 R		mov eax, fileHandle
 00000358  E8 00000000 E		call CloseFile

					;Buffer contains the worlds information
 0000035D  33 FF			xor edi, edi                ; Clear edi for use as index
 0000035F  8B 0D 00001756 R	    mov ecx, bytesRead          ; Length of the buffer to print

					; Clear Screen before drawing
 00000365  E8 00000000 E		call Clrscr
 0000036A			DrawLoop:
 0000036A  3B F9		    cmp edi, ecx                ; Check if we've reached the end of the buffer
 0000036C  74 16		    je EndDraw                  ; Jump to end if done

 0000036E  8A 87 000003CA R	    mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension

 00000374  3C 2A			cmp al, '*'
 00000376  74 02			je ChangeColorYellow

 00000378				ChangeColorDefault:
					;ChangeTextColor white + (black * 16)
 00000378  EB 02			jmp Write

 0000037A				ChangeColorYellow:
					;ChangeTextColor yellow + (black * 16)
 0000037A  EB 00			jmp Write


 0000037C				Write:
 0000037C  E8 00000000 E	    call WriteChar					; Write the character to the 


 00000381  47			    inc edi                     ; Move to the next character
 00000382  EB E6		    jmp DrawLoop                ; Continue loop

 00000384			EndDraw:
 00000384  C3			    ret

 00000385			DrawWorld ENDP

 00000385			DrawInfo PROC
 00000385  B2 55			mov dl, 85
 00000387  B6 00			mov dh, 0
 00000389  E8 00000000 E		call Gotoxy
 0000038E  0F B6 05			movzx eax, xPos
	   00002B06 R
 00000395  E8 00000000 E		call WriteInt

 0000039A  B2 55			mov dl, 85
 0000039C  B6 01			mov dh, 1
 0000039E  E8 00000000 E		call Gotoxy
 000003A3  0F B6 05			movzx eax, yPos
	   00002B07 R
 000003AA  E8 00000000 E		call WriteInt

 000003AF  B2 55			mov dl, 85
 000003B1  B6 02			mov dh, 2
 000003B3  E8 00000000 E		call Gotoxy

					GetBufferPos
 000003B8  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002B04 R
 000003BF  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000003C2  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002B07 R
 000003C9  8B DA	     1		mov ebx, edx
 000003CB  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000003CD  8B D3	     1		mov edx, ebx
 000003CF  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000003D1  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002B06 R
 000003D8  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000003DA  4F				dec edi
 000003DB  8A 87 000003CA R		mov al, byte ptr [buffer + edi]
					
					mWrite "Left: ", 0
			     1	;
runner.asm(433) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  runner.asm(433): Main Line Code
 00003E98		     1		.data		
 00003E98 4C 65 66 74 3A     1		??0000 BYTE "Left: ",0	
	   20 00
 000003E1		     1		.code
 000003E1  52		     1		push	edx
 000003E2  BA 00003E98 R     1		mov	edx,OFFSET ??0000
 000003E7  E8 00000000 E     1		call	WriteString
 000003EC  5A		     1		pop	edx
 000003ED  E8 00000000 E		call WriteChar

 000003F2  B2 55			mov dl, 85
 000003F4  B6 03			mov dh, 3
 000003F6  E8 00000000 E		call Gotoxy

 000003FB  47				inc edi
 000003FC  47				inc edi
 000003FD  8A 87 000003CA R		mov al, byte ptr [buffer + edi]

					mWrite "Right: ", 0
			     1	;
runner.asm(444) : warning A4006:too many arguments in macro call
 mWrite(1): Macro Called From
  runner.asm(444): Main Line Code
 00003E9F		     1		.data		
 00003E9F 52 69 67 68 74     1		??0001 BYTE "Right: ",0	
	   3A 20 00
 00000403		     1		.code
 00000403  52		     1		push	edx
 00000404  BA 00003E9F R     1		mov	edx,OFFSET ??0001
 00000409  E8 00000000 E     1		call	WriteString
 0000040E  5A		     1		pop	edx
 0000040F  E8 00000000 E		call WriteChar


 00000414  C3				ret
 00000415			DrawInfo ENDP

 00000415			PreparePhrases PROC
					; Open the file for reading
 00000415  BA 0000175A R		mov edx, OFFSET phrasesfilename      ; Pointer to filename
 0000041A  E8 00000000 E		call OpenInputFile
 0000041F  A3 00002AF2 R		mov phrasesfileHandle, eax

					; Read from the file
 00000424  A1 00002AF2 R		mov eax, phrasesfileHandle
 00000429  BA 0000176A R		mov edx, OFFSET phrasesbuffer
 0000042E  B9 00001388			mov ecx, SIZEOF phrasesbuffer
 00000433  E8 00000000 E		call ReadFromFile
 00000438  A3 00002AF6 R		mov phrasesbytesRead, eax

					; Close the file
 0000043D  A1 00002AF2 R		mov eax, phrasesfileHandle
 00000442  E8 00000000 E		call CloseFile

 00000447  C3				ret

					; phrasesbuffer contains the phrases information
 00000448			PreparePhrases ENDP

 00000448			GetRandomPhrase PROC
					; Get a random phrase
 00000448  E8 00000000 E		call Randomize
 0000044D  B8 0000004F			mov eax, 79
 00000452  E8 00000000 E		call RandomRange
 00000457  8B D8			mov ebx, eax
 00000459  43				inc ebx

					; ebx contains the randomly generated index

					; Find the phrase
 0000045A  33 FF			xor edi, edi
 0000045C  33 C9			xor ecx, ecx
					; ecx will contain the current phrase index

 0000045E				FindLoop:
						; Find the end of the buffer
 0000045E  3B 3D 00002AF6 R			cmp edi, phrasesbytesRead
 00000464  74 34				je EndFind

						; If randomly generated index matches the current phrase index, we found the phrase
 00000466  3B D9				cmp ebx, ecx
 00000468  74 0E				je FoundPhrase

						; Check for new line, if not skip to NotNewlineFind
 0000046A  8A 87 0000176A R			mov al, byte ptr [phrasesbuffer + edi]
 00000470  3C 0A				cmp al, 0ah ; New line
 00000472  75 01				jne NotNewLineFind

						; Increment the phrase index
 00000474  41					inc ecx

 00000475				NotNewlineFind:
 00000475  47					inc edi			; Increment edi to show a character was read
 00000476  EB E6				jmp FindLoop

 00000478				FoundPhrase:
						; Save the start of the phrase
 00000478  89 3D 00002AFA R			mov phraseStart, edi

						; Find the end of the phrase
 0000047E					FindEnd:
 0000047E  3B 3D 00002AF6 R				cmp edi, phrasesbytesRead	; Check if we've reached the end of the buffer
 00000484  74 0D					je FinishFind ; Jump to finish if done

 00000486  8A 87 0000176A R				mov al, byte ptr [phrasesbuffer + edi] ; Move the current character to al
 0000048C  47						inc edi ; Move to the next character
 0000048D  3C 0A					cmp al, 0ah ; New line
 0000048F  74 02					je FinishFind

 00000491  EB EB					jmp FindEnd

 00000493						FinishFind:
							; Save the end of the phrase
 00000493  4F						dec edi ; Move back one to get the last character of the phrase
 00000494  89 3D 00002AFE R				mov phraseEnd, edi ; Save the end

 0000049A				EndFind:
 0000049A  C3				ret

 0000049B			GetRandomPhrase ENDP

 0000049B			PrintRandomPhrase PROC
 0000049B  E8 FFFFFFA8			call GetRandomPhrase

 000004A0  8B 3D 00002AFA R		mov edi, phraseStart
 000004A6  8B 0D 00002AFE R		mov ecx, phraseEnd

 000004AC				PrintLoop:
 000004AC  3B F9			    cmp edi, ecx	; Check if we've reached the end of the phrase
 000004AE  74 0E				je EndPrint		; Jump to end if done

 000004B0  8A 87 0000176A R			mov al, byte ptr [phrasesbuffer + edi]	; Move the current character to al
 000004B6  E8 00000000 E			call WriteChar							; Write the character to the screen

 000004BB  47					inc edi			; Move to the next character
 000004BC  EB EE				jmp PrintLoop	; Continue loop

 000004BE				EndPrint:
 000004BE  C3				ret

 000004BF			PrintRandomPhrase ENDP

 000004BF			GenerateMathEquation PROC
					; Clear the equation buffer
 000004BF  BF 00002B10 R		mov edi, OFFSET equationBuffer	; Move the offset of the equation buffer into edi
 000004C4  B9 00001388			mov ecx, SIZEOF equationBuffer	; Move the size of the equation buffer into ecx
 000004C9  B0 00			mov al, 0	; Move 0 into al
 000004CB  F3/ AA			rep stosb	; Fill the buffer with 0

					; Clear the equation answer
 000004CD  C7 05 00002B09 R		mov equationAnswer, 0
	   00000000

					; Generate first term
 000004D7  E8 00000000 E		call Randomize
 000004DC  B8 00000009			mov eax, 9					; 9 is the maximum value for a term
 000004E1  E8 00000000 E		call RandomRange
 000004E6  40				inc eax						; Increment eax to get a number between 1 and 9

					; Store term into buffer
 000004E7  A2 00002B0F R		mov term, al				; Store the random number into term
 000004EC  A0 00002B0F R		mov al, term				; Move the term number into al
 000004F1  04 30			add al, 48					; Convert the number to ASCII
 000004F3  88 07			mov [edi], al				; Move the first term into buffer
 000004F5  47				inc edi						; Move to the next position in the equation buffer

					; Store term into Equation Answer
 000004F6  0F B6 05			movzx eax, term				; Move the term into eax
	   00002B0F R
 000004FD  A3 00002B09 R		mov equationAnswer, eax	; Move the first term into the answer
 00000502  FE C1			inc cl						; Increment the counter

					; Prepare counter
 00000504  B1 01			mov cl, 1

					; Generate the terms
 00000506				GenerateTerms:
						; Call small delay for time slicing
 00000506  B8 0000000A				mov eax, 10
 0000050B  E8 00000000 E			call Delay
						; Generate a term
 00000510  E8 00000000 E			call Randomize
 00000515  B8 00000009				mov eax, 9		; 9 is the maximum value for a term
 0000051A  E8 00000000 E			call RandomRange
 0000051F  40					inc eax			; Increment eax to get a number between 1 and 9
 00000520  A2 00002B0F R			mov term, al	; Move the term number into term


 00000525  E8 00000000 E			call Randomize
 0000052A  B8 00000003				mov eax, 3			; 3 is the maximum number of operators
 0000052F  E8 00000000 E			call RandomRange	; Generate a random operator number between 1 and 3 in eax
 00000534  40					inc eax				; Increment eax to get a number between 1 and 3
 00000535  A2 00002B0E R			mov operator, al	; Move the operator number into variable
					

						; Add the operator to the equation buffer
						.IF operator == 1
 00000543  C6 07 20					mov BYTE PTR [edi], ' '
 00000546  C6 47 01 2B					mov BYTE PTR [edi+1], '+'
 0000054A  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 0000054E  0F B6 05					movzx eax, term				; Move the term into eax
	   00002B0F R
 00000555  01 05 00002B09 R				add equationAnswer, eax		; Add the term to the answer
						.ELSEIF operator == 2
 00000566  C6 07 20					mov BYTE PTR [edi], ' '
 00000569  C6 47 01 2D					mov BYTE PTR [edi+1], '-'
 0000056D  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000571  A2 00002B0F R				mov term, al				; Move the term into al
 00000576  0F B6 05					movzx eax, term				; Move the term into eax
	   00002B0F R
 0000057D  29 05 00002B09 R				sub equationAnswer, eax		; Subtract the term from the answer
						.ELSEIF operator == 3
 0000058E  C6 07 20					mov BYTE PTR [edi], ' '
 00000591  C6 47 01 2A					mov BYTE PTR [edi+1], '*'
 00000595  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000599  0F B6 1D					movzx ebx, term				; Move the term into ebx
	   00002B0F R
 000005A0  A1 00002B09 R				mov eax, equationAnswer		; Move the answer into eax
 000005A5  F7 E3					mul ebx						; Multiply the term by the answer
 000005A7  A3 00002B09 R				mov equationAnswer, eax		; Move the result into the equation answer
						.ENDIF

						; Add the term to the equation buffer
 000005AC  83 C7 03				add edi, 3					; Move to the end of the equation buffer
 000005AF  A0 00002B0F R			mov al, term 				; Move the term into al
 000005B4  04 30				add al, 48 					; Convert the number to ASCII
 000005B6  88 07				mov [edi], al				; Move the term into the equation buffer
 000005B8  47					inc edi						; Move to the next position in the equation buffer

						; Increment the counter and check if we've reached the number of terms
 000005B9  FE C1				inc cl
 000005BB  3A 0D 00002B0D R			cmp cl, terms
 000005C1  0F 8C FFFFFF3F			jl GenerateTerms

						; Add the equals sign to the equation buffer
 000005C7  C6 07 20				mov BYTE PTR [edi], ' '
 000005CA  C6 47 01 3D				mov BYTE PTR [edi+1], '='
 000005CE  C6 47 02 20				mov BYTE PTR [edi+2], ' '
 000005D2  C6 47 03 3F		        mov BYTE PTR [edi+3], '?'
 000005D6  83 C7 04				add edi, 4

						; Print the equation
 000005D9  B9 00002B10 R			mov ecx, OFFSET equationBuffer
						
 000005DE					PrintLoop:
 000005DE  3B F9				cmp edi, ecx	; Check if we've reached the end of the equation
 000005E0  74 0A				je EndPrint		; Jump to end if done

 000005E2  8A 01				mov al, byte ptr [ecx]	; Move the current character to al
 000005E4  E8 00000000 E			call WriteChar							; Write the character to the screen
						
 000005E9  41					inc ecx
 000005EA  EB F2				jmp PrintLoop

 000005EC					EndPrint:
 000005EC  C3				ret

 000005ED			GenerateMathEquation ENDP

				END main
Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/01/24 17:06:29
runner.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

GetBufferPos . . . . . . . . . .	Proc
IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003EA7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005ED Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawInfo . . . . . . . . . . . .	P Near	 00000385 _TEXT	Length= 00000090 Public STDCALL
DrawWorld  . . . . . . . . . . .	P Near	 0000031B _TEXT	Length= 0000006A Public STDCALL
  readError  . . . . . . . . . .	L Near	 00000347 _TEXT	
  readSuccess  . . . . . . . . .	L Near	 00000353 _TEXT	
  DrawLoop . . . . . . . . . . .	L Near	 0000036A _TEXT	
  ChangeColorDefault . . . . . .	L Near	 00000378 _TEXT	
  ChangeColorYellow  . . . . . .	L Near	 0000037A _TEXT	
  Write  . . . . . . . . . . . .	L Near	 0000037C _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 00000384 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateMathEquation . . . . . .	P Near	 000004BF _TEXT	Length= 0000012E Public STDCALL
  GenerateTerms  . . . . . . . .	L Near	 00000506 _TEXT	
  PrintLoop  . . . . . . . . . .	L Near	 000005DE _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000005EC _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRandomPhrase  . . . . . . . .	P Near	 00000448 _TEXT	Length= 00000053 Public STDCALL
  FindLoop . . . . . . . . . . .	L Near	 0000045E _TEXT	
  NotNewlineFind . . . . . . . .	L Near	 00000475 _TEXT	
  FoundPhrase  . . . . . . . . .	L Near	 00000478 _TEXT	
  FindEnd  . . . . . . . . . . .	L Near	 0000047E _TEXT	
  FinishFind . . . . . . . . . .	L Near	 00000493 _TEXT	
  EndFind  . . . . . . . . . . .	L Near	 0000049A _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InitDotPosition  . . . . . . . .	P Near	 0000004C _TEXT	Length= 0000001E Public STDCALL
IntroScreen  . . . . . . . . . .	P Near	 00000035 _TEXT	Length= 00000017 Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 00000044 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDot  . . . . . . . . . . . .	P Near	 0000006A _TEXT	Length= 000002B1 Public STDCALL
  CheckStar  . . . . . . . . . .	L Near	 000000BB _TEXT	
  checkPass  . . . . . . . . . .	L Near	 00000120 _TEXT	
  GoodInput  . . . . . . . . . .	L Near	 0000015D _TEXT	
  CorrectAnswer  . . . . . . . .	L Near	 00000167 _TEXT	
  IncorrectAnswer  . . . . . . .	L Near	 00000182 _TEXT	
  AnswerChecked  . . . . . . . .	L Near	 0000019B _TEXT	
  WaitLoop . . . . . . . . . . .	L Near	 000001A7 _TEXT	
  checkFail  . . . . . . . . . .	L Near	 000001B3 _TEXT	
  MoveUp . . . . . . . . . . . .	L Near	 000001B8 _TEXT	
  MoveDown . . . . . . . . . . .	L Near	 0000020E _TEXT	
  MoveLeft . . . . . . . . . . .	L Near	 00000267 _TEXT	
  MoveRight  . . . . . . . . . .	L Near	 000002A7 _TEXT	
  RedrawDot  . . . . . . . . . .	L Near	 000002EA _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PreparePhrases . . . . . . . . .	P Near	 00000415 _TEXT	Length= 00000033 Public STDCALL
PrintRandomPhrase  . . . . . . .	P Near	 0000049B _TEXT	Length= 00000024 Public STDCALL
  PrintLoop  . . . . . . . . . .	L Near	 000004AC _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000004BE _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000035 Public STDCALL
  game . . . . . . . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00003E98 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00003E9F _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 000003CA _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00001756 _DATA	
correctAnswerString  . . . . . .	Byte	 00000320 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difficultyLevel  . . . . . . . .	Byte	 00002B08 _DATA	
equationAnswer . . . . . . . . .	DWord	 00002B09 _DATA	
equationBuffer . . . . . . . . .	Byte	 00002B10 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001752 _DATA	
filename . . . . . . . . . . . .	Byte	 000003C0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectAnswerString  . . . . .	Byte	 0000037F _DATA	
introString  . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxX . . . . . . . . . . . . . .	Byte	 00002B04 _DATA	
maxY . . . . . . . . . . . . . .	Byte	 00002B05 _DATA	
oldX . . . . . . . . . . . . . .	Byte	 00002B02 _DATA	
oldY . . . . . . . . . . . . . .	Byte	 00002B03 _DATA	
operator . . . . . . . . . . . .	Byte	 00002B0E _DATA	
phraseEnd  . . . . . . . . . . .	DWord	 00002AFE _DATA	
phraseStart  . . . . . . . . . .	DWord	 00002AFA _DATA	
phrasesbuffer  . . . . . . . . .	Byte	 0000176A _DATA	
phrasesbytesRead . . . . . . . .	DWord	 00002AF6 _DATA	
phrasesfileHandle  . . . . . . .	DWord	 00002AF2 _DATA	
phrasesfilename  . . . . . . . .	Byte	 0000175A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
terms  . . . . . . . . . . . . .	Byte	 00002B0D _DATA	
term . . . . . . . . . . . . . .	Byte	 00002B0F _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos . . . . . . . . . . . . . .	Byte	 00002B06 _DATA	
yPos . . . . . . . . . . . . . .	Byte	 00002B07 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   2 Warnings
	   0 Errors
