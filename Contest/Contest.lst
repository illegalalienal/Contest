Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/01/24 15:54:03
runner.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

 00000000 57 65 6C 63 6F	introString db "Welcome to... ", 0Dh, 0Ah, 0Dh, 0Ah
	   6D 65 20 74 6F
	   2E 2E 2E 20 0D
	   0A 0D 0A

 00000012  20 20 5F 5F 20				db "  __  __    _  _____ _   _ _____ __  __  ___  _   _ ___ _   _ __  __ ", 0Dh, 0Ah
	   20 5F 5F 20 20
	   20 20 5F 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   20 20 5F 5F 20
	   20 5F 5F 5F 20
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 20
	   20 5F 5F 20 0D
	   0A
 00000059  20 7C 20 20 5C				db " |  \/  |  / \|_   _| | | | ____|  \/  |/ _ \| \ | |_ _| | | |  \/  |", 0Dh, 0Ah
	   2F 20 20 7C 20
	   20 2F 20 5C 7C
	   5F 20 20 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 5F 5F
	   5F 5F 7C 20 20
	   5C 2F 20 20 7C
	   2F 20 5F 20 5C
	   7C 20 5C 20 7C
	   20 7C 5F 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 20 5C
	   2F 20 20 7C 0D
	   0A
 000000A0  20 7C 20 7C 5C				db " | |\/| | / _ \ | | | |_| |  _| | |\/| | | | |  \| || || | | | |\/| |", 0Dh, 0Ah
	   2F 7C 20 7C 20
	   2F 20 5F 20 5C
	   20 7C 20 7C 20
	   7C 20 7C 5F 7C
	   20 7C 20 20 5F
	   7C 20 7C 20 7C
	   5C 2F 7C 20 7C
	   20 7C 20 7C 20
	   7C 20 20 5C 7C
	   20 7C 7C 20 7C
	   7C 20 7C 20 7C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 0D
	   0A
 000000E7  20 7C 20 7C 20				db " | |  | |/ ___ \| | |  _  | |___| |  | | |_| | |\  || || |_| | |  | |", 0Dh, 0Ah
	   20 7C 20 7C 2F
	   20 5F 5F 5F 20
	   5C 7C 20 7C 20
	   7C 20 20 5F 20
	   20 7C 20 7C 5F
	   5F 5F 7C 20 7C
	   20 20 7C 20 7C
	   20 7C 5F 7C 20
	   7C 20 7C 5C 20
	   20 7C 7C 20 7C
	   7C 20 7C 5F 7C
	   20 7C 20 7C 20
	   20 7C 20 7C 0D
	   0A
 0000012E  20 7C 5F 7C 20				db " |_|  |_/_/   \_\_| |_| |_|_____|_|  |_|\___/|_| \_|___|\___/|_|  |_|", 0Dh, 0Ah, 0Dh, 0Ah
	   20 7C 5F 2F 5F
	   2F 20 20 20 5C
	   5F 5C 5F 7C 20
	   7C 5F 7C 20 7C
	   5F 7C 5F 5F 5F
	   5F 5F 7C 5F 7C
	   20 20 7C 5F 7C
	   5C 5F 5F 5F 2F
	   7C 5F 7C 20 5C
	   5F 7C 5F 5F 5F
	   7C 5C 5F 5F 5F
	   2F 7C 5F 7C 20
	   20 7C 5F 7C 0D
	   0A 0D 0A


 00000177  61 20 67 61 6D				db "a game of math and adventure!", 0Dh, 0Ah
	   65 20 6F 66 20
	   6D 61 74 68 20
	   61 6E 64 20 61
	   64 76 65 6E 74
	   75 72 65 21 0D
	   0A
 00000196  54 72 61 76 65				db "Travel through the world and challenge all the math masters.... if you dare....", 0Dh, 0Ah, 0Dh, 0ah
	   6C 20 74 68 72
	   6F 75 67 68 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   61 6E 64 20 63
	   68 61 6C 6C 65
	   6E 67 65 20 61
	   6C 6C 20 74 68
	   65 20 6D 61 74
	   68 20 6D 61 73
	   74 65 72 73 2E
	   2E 2E 2E 20 69
	   66 20 79 6F 75
	   20 64 61 72 65
	   2E 2E 2E 2E 0D
	   0A 0D 0A
 000001E9  54 49 50 53 20				db "TIPS & INFO:", 0Dh, 0Ah
	   26 20 49 4E 46
	   4F 3A 0D 0A
 000001F7  20 2D 20 41 73				db " - Asterisks (*) represent a math master, go up and press space to begin battle", 0Dh, 0Ah
	   74 65 72 69 73
	   6B 73 20 28 2A
	   29 20 72 65 70
	   72 65 73 65 6E
	   74 20 61 20 6D
	   61 74 68 20 6D
	   61 73 74 65 72
	   2C 20 67 6F 20
	   75 70 20 61 6E
	   64 20 70 72 65
	   73 73 20 73 70
	   61 63 65 20 74
	   6F 20 62 65 67
	   69 6E 20 62 61
	   74 74 6C 65 0D
	   0A
 00000248  20 2D 20 59 6F				db " - You may want to get some questions wrong here and there, as you win, difficulty and terms per question increase", 0Dh, 0Ah
	   75 20 6D 61 79
	   20 77 61 6E 74
	   20 74 6F 20 67
	   65 74 20 73 6F
	   6D 65 20 71 75
	   65 73 74 69 6F
	   6E 73 20 77 72
	   6F 6E 67 20 68
	   65 72 65 20 61
	   6E 64 20 74 68
	   65 72 65 2C 20
	   61 73 20 79 6F
	   75 20 77 69 6E
	   2C 20 64 69 66
	   66 69 63 75 6C
	   74 79 20 61 6E
	   64 20 74 65 72
	   6D 73 20 70 65
	   72 20 71 75 65
	   73 74 69 6F 6E
	   20 69 6E 63 72
	   65 61 73 65 0D
	   0A
 000002BC  50 72 65 73 73				db "Press any key to continue...", 0Dh, 0Ah, 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 0D 0A
	   00
						

 000002DB 43 6F 72 72 65	correctAnswerString db "Correct! Math masters hear your name world wide and prepare in anticipation of your arrival...", 0
	   63 74 21 20 4D
	   61 74 68 20 6D
	   61 73 74 65 72
	   73 20 68 65 61
	   72 20 79 6F 75
	   72 20 6E 61 6D
	   65 20 77 6F 72
	   6C 64 20 77 69
	   64 65 20 61 6E
	   64 20 70 72 65
	   70 61 72 65 20
	   69 6E 20 61 6E
	   74 69 63 69 70
	   61 74 69 6F 6E
	   20 6F 66 20 79
	   6F 75 72 20 61
	   72 72 69 76 61
	   6C 2E 2E 2E 00
 0000033A 49 6E 63 6F 72	incorrectAnswerString db "Incorrect! The world is doomed to a future of math illiteracy...", 0
	   72 65 63 74 21
	   20 54 68 65 20
	   77 6F 72 6C 64
	   20 69 73 20 64
	   6F 6F 6D 65 64
	   20 74 6F 20 61
	   20 66 75 74 75
	   72 65 20 6F 66
	   20 6D 61 74 68
	   20 69 6C 6C 69
	   74 65 72 61 63
	   79 2E 2E 2E 00

 0000037B 77 6F 72 6C 64	filename BYTE "world.txt",0
	   2E 74 78 74 00
 00000385  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 0000170D 00000000		fileHandle DWORD ?
 00001711 00000000		bytesRead DWORD ?

 00001715 6D 61 74 68 70	phrasesfilename BYTE "mathphrases.txt",0
	   68 72 61 73 65
	   73 2E 74 78 74
	   00
 00001725  00001388 [		phrasesbuffer BYTE 5000 DUP(?)
	    00
	   ]
 00002AAD 00000000		phrasesfileHandle DWORD ?
 00002AB1 00000000		phrasesbytesRead DWORD ?
 00002AB5 00000000		phraseStart DWORD ?
 00002AB9 00000000		phraseEnd DWORD ?

 00002ABD 00			oldX BYTE ?
 00002ABE 00			oldY BYTE ?
 00002ABF 50			maxX BYTE 80
 00002AC0 19			maxY BYTE 25
 00002AC1 01			xPos BYTE 1
 00002AC2 01			yPos BYTE 1

 00002AC3 02			difficultyLevel BYTE 2

 00002AC4 00000000		equationAnswer DWORD ?			; Variable to store the answer to the equation
 00002AC8 00			terms BYTE ?					; Number of terms in the equation
 00002AC9 00			operator BYTE ?					; Equation operator code
 00002ACA 00			term BYTE ?						; Equation term
 00002ACB  00001388 [		equationBuffer BYTE 5000 DUP(?) ; Buffer to store the equation
	    00
	   ]

 00000000			.code
 00000000			main PROC
					
					
 00000000  E8 000003D3			call PreparePhrases

 00000005  E8 00000030			call IntroScreen

 0000000A  E8 000002E7			call DrawWorld
 0000000F  E8 0000003D			call InitDotPosition
					
 00000014  B2 55			mov dl, 85
 00000016  B6 05			mov dh, 5
 00000018  E8 00000000 E		call Gotoxy

					
 0000001D				game:
 0000001D  B8 00000010				mov eax, 16
 00000022  E8 00000000 E			call Delay
 00000027  E8 00000334				call DrawInfo
 0000002C  E8 0000003E				call MoveDot
 00000031  EB EA			jmp game

					exit
 0000003A			main ENDP

 0000003A			IntroScreen PROC
					; Clear screen and write intro message
 0000003A  E8 00000000 E		call Clrscr
 0000003F  BA 00000000 R		mov edx, OFFSET introString
 00000044  E8 00000000 E		call WriteString


					;Wait for key press before exiting intro screen
 00000049				WaitLoop:
 00000049  E8 00000000 E		call ReadKey
 0000004E  74 F9			jz WaitLoop

 00000050  C3				ret
 00000051			IntroScreen ENDP

 00000051			InitDotPosition PROC
 00000051  BA 00000000			mov edx, 0
 00000056  8A 15 00002AC1 R		mov dl ,xPos
 0000005C  8A 35 00002AC2 R		mov dh, yPos
 00000062  E8 00000000 E		call Gotoxy
 00000067  B0 2E			mov al, '.'
 00000069  E8 00000000 E		call WriteChar
 0000006E  C3				ret
 0000006F			InitDotPosition ENDP

 0000006F			MoveDot PROC
 0000006F  E8 00000000 E		call ReadKey
 00000074  0F 84 00000257		jz RedrawDot

 0000007A  8A 15 00002AC1 R		mov dl, xPos
 00000080  8A 35 00002AC2 R		mov dh, yPos

					; Check direction based on virtual scan code (AH)
 00000086  80 FC 48		    cmp  ah, 48h        ; Up arrow
 00000089  0F 84 00000126	    je   MoveUp
 0000008F  80 FC 50		    cmp  ah, 50h        ; Down arrow
 00000092  0F 84 00000168	    je   MoveDown
 00000098  80 FC 4B		    cmp  ah, 4Bh        ; Left arrow
 0000009B  0F 84 000001AD	    je   MoveLeft
 000000A1  80 FC 4D		    cmp  ah, 4Dh        ; Right arrow
 000000A4  0F 84 000001E4	    je   MoveRight
 000000AA  80 FC 39			cmp  ah, 39h		; Space
 000000AD  74 05		          	je	 CheckStar
					
 000000AF  E9 0000021D			jmp RedrawDot			; Check for new input if none matched

 000000B4				CheckStar:
						; Check if the dot is next to a star
 000000B4  0F B6 05				movzx eax, maxX
	   00002ABF R
 000000BB  83 C0 02				add eax, 2
 000000BE  0F B6 3D				movzx edi, yPos
	   00002AC2 R
 000000C5  8B DA				mov ebx, edx
 000000C7  F7 E7				mul edi
 000000C9  8B D3				mov edx, ebx
 000000CB  8B F8				mov edi, eax
 000000CD  0F B6 05				movzx eax, xPos
	   00002AC1 R
 000000D4  03 F8				add edi, eax

						; Check Above
 000000D6  0F B6 05				movzx eax, maxX	; move max X into eax
	   00002ABF R
 000000DD  83 C0 02				add eax, 2		; add 2 to account for new line characters
 000000E0  2B F8				sub edi, eax	; subtract by one row to check above
 000000E2  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
 000000E8  3C 2A				cmp al, '*'
 000000EA  74 31				je checkPass

						; Check Below
 000000EC  0F B6 05				movzx eax, maxX
	   00002ABF R
 000000F3  83 C0 02				add eax, 2
 000000F6  03 F8				add edi, eax	; add one row to check below
 000000F8  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
 000000FE  3C 2A				cmp al, '*'
 00000100  74 1B				je checkPass

						; Check Left
 00000102  4F					dec edi			; move x left one to check left
 00000103  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
 00000109  3C 2A				cmp al, '*'
 0000010B  74 10				je checkPass

						; Check Right
 0000010D  47					inc edi			; move x right one to check right
 0000010E  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
 00000114  3C 2A				cmp al, '*'
 00000116  74 05				je checkPass
						
 00000118  E9 00000093				jmp checkFail

 0000011D					checkPass:
							; Clear screen, write battle message, show math problem
 0000011D  E8 00000000 E				call Clrscr
							; Move cursor to top left corner
 00000122  B2 00					mov dl, 0
 00000124  B6 00					mov dh, 0
 00000126  E8 00000000 E				call Gotoxy
							; Write battle message
 0000012B  E8 0000032E					call PrintRandomPhrase
							; Show math problem
 00000130  B2 00					mov dl, 0
 00000132  B6 05					mov dh, 5
 00000134  E8 00000000 E				call Gotoxy
 00000139  E8 00000344					call GenerateMathEquation
							; Read answer from user
 0000013E  B2 00					mov dl, 0
 00000140  B6 0A					mov dh, 10
 00000142  E8 00000000 E				call Gotoxy
 00000147  E8 00000000 E				call ReadInt
 0000014C  71 0C					jno GoodInput

							;Write error message
 0000014E  E8 00000000 E				call WriteWindowsMsg
							exit

							; If input is good, check against equation answer
 0000015A						GoodInput:
 0000015A  3B 05 00002AC4 R				cmp eax, equationAnswer
 00000160  74 02					je CorrectAnswer

 00000162  EB 1B					jmp IncorrectAnswer

 00000164						CorrectAnswer: 
							; Write correct answer message, increase difficulty
 00000164  B2 00					mov dl, 0
 00000166  B6 0F					mov dh, 15
 00000168  E8 00000000 E				call Gotoxy
 0000016D  BA 000002DB R				mov edx, OFFSET correctAnswerString
 00000172  E8 00000000 E				call WriteString
 00000177  FE 05 00002AC3 R				inc difficultyLevel
 0000017D  EB 19					jmp AnswerChecked

 0000017F						IncorrectAnswer:
							; Write incorrect answer message, decrease difficulty
 0000017F  B2 00					mov dl, 0
 00000181  B6 0F					mov dh, 15
 00000183  E8 00000000 E				call Gotoxy
 00000188  BA 0000033A R				mov edx, OFFSET incorrectAnswerString
 0000018D  E8 00000000 E				call WriteString
 00000192  FE 0D 00002AC3 R				dec difficultyLevel

 00000198						AnswerChecked:

							;update terms with difficulty level
 00000198  8A 25 00002AC3 R				mov ah, difficultyLevel
 0000019E  88 25 00002AC8 R				mov terms, ah

							;Wait for key press before continuing
 000001A4						WaitLoop:
 000001A4  E8 00000000 E				call ReadKey
 000001A9  74 F9					jz WaitLoop

 000001AB  E8 00000146					call DrawWorld


 000001B0					checkFail:
 000001B0  E9 0000011C					jmp RedrawDot	



					
					
 000001B5				MoveUp:
 000001B5  8A 25 00002AC2 R			mov ah, yPos
 000001BB  80 FC 01				cmp ah, 1
 000001BE  0F 8E 0000010D			jle RedrawDot	; If dot cannot move, jump without decrementing

 000001C4  0F B6 05				movzx eax, maxX	; move max X into eax
	   00002ABF R
 000001CB  83 C0 02				add eax, 2		; add 2 to account for new line characters
 000001CE  0F B6 3D				movzx edi, yPos	; move y into edi
	   00002AC2 R
 000001D5  4F					dec edi			; move y up one to account for move
 000001D6  8B DA				mov ebx, edx
 000001D8  F7 E7				mul edi			; multiply y by max x to get right row
 000001DA  8B D3				mov edx, ebx
 000001DC  8B F8				mov edi, eax	; mov mul result back into edi
 000001DE  0F B6 05				movzx eax, xPos	; zero extend xpos to add to edi
	   00002AC1 R
 000001E5  03 F8				add edi, eax	; add x to edi to get proper index
 000001E7  8A 87 00000385 R			mov al, byte ptr [buffer + edi]

 000001ED  3C 20				cmp al, ' '
 000001EF  0F 85 000000DC			jne RedrawDot	; If space to be moved into isn't empty, skip

 000001F5  FE 0D 00002AC2 R			dec yPos	
 000001FB  E9 000000D1				jmp RedrawDot

 00000200				MoveDown:
 00000200  8A 25 00002AC2 R			mov ah, yPos
 00000206  3A 25 00002AC0 R			cmp ah, [maxY]
 0000020C  0F 8D 000000BF			jge RedrawDot

 00000212  0F B6 05				movzx eax, maxX
	   00002ABF R
 00000219  83 C0 02				add eax, 2
 0000021C  0F B6 3D				movzx edi, yPos
	   00002AC2 R
 00000223  47					inc edi			; move y down one to account for move
 00000224  8B DA				mov ebx, edx
 00000226  F7 E7				mul edi
 00000228  8B D3				mov edx, ebx
 0000022A  8B F8				mov edi, eax
 0000022C  0F B6 05				movzx eax, xPos
	   00002AC1 R
 00000233  03 F8				add edi, eax
 00000235  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
						
 0000023B  3C 20				cmp al, ' '
 0000023D  0F 85 0000008E			jne RedrawDot

 00000243  FE 05 00002AC2 R			inc yPos
 00000249  E9 00000083				jmp RedrawDot

 0000024E				MoveLeft:
 0000024E  8A 25 00002AC1 R			mov ah, xPos
 00000254  80 FC 01				cmp ah, 1
 00000257  7E 78				jle RedrawDot

 00000259  0F B6 05				movzx eax, maxX
	   00002ABF R
 00000260  83 C0 02				add eax, 2
 00000263  0F B6 3D				movzx edi, yPos
	   00002AC2 R
 0000026A  8B DA				mov ebx, edx
 0000026C  F7 E7				mul edi
 0000026E  8B D3				mov edx, ebx
 00000270  8B F8				mov edi, eax
 00000272  0F B6 05				movzx eax, xPos
	   00002AC1 R
 00000279  03 F8				add edi, eax
 0000027B  4F					dec edi			; move x left one to account for move
 0000027C  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
						
 00000282  3C 20				cmp al, ' '
 00000284  75 4B				jne RedrawDot

 00000286  FE 0D 00002AC1 R			dec xPos
 0000028C  EB 43				jmp RedrawDot

 0000028E				MoveRight:
 0000028E  8A 25 00002AC1 R			mov ah, xPos
 00000294  3A 25 00002ABF R			cmp ah, [maxX]
 0000029A  7D 35				jge RedrawDot

 0000029C  0F B6 05				movzx eax, maxX
	   00002ABF R
 000002A3  83 C0 02				add eax, 2
 000002A6  0F B6 3D				movzx edi, yPos
	   00002AC2 R
 000002AD  8B DA				mov ebx, edx
 000002AF  F7 E7				mul edi
 000002B1  8B D3				mov edx, ebx
 000002B3  8B F8				mov edi, eax
 000002B5  0F B6 05				movzx eax, xPos
	   00002AC1 R
 000002BC  03 F8				add edi, eax
 000002BE  47					inc edi			; move x right one to account for move
 000002BF  8A 87 00000385 R			mov al, byte ptr [buffer + edi]
						
 000002C5  3C 20				cmp al, ' '
 000002C7  75 08				jne RedrawDot

 000002C9  FE 05 00002AC1 R			inc xPos
 000002CF  EB 00				jmp RedrawDot

 000002D1				RedrawDot:
						;call Clrscr
						;call DrawWorld
 000002D1  E8 00000000 E			call Gotoxy
 000002D6  B0 20				mov al, ' '
 000002D8  E8 00000000 E			call WriteChar	; Write space over old dot

 000002DD  8A 15 00002AC1 R			mov dl, xPos
 000002E3  8A 35 00002AC2 R			mov dh, yPos
 000002E9  E8 00000000 E			call Gotoxy		; Go to new xy
 000002EE  B0 2E				mov al, '.'
 000002F0  E8 00000000 E			call WriteChar	; Write dot in new xy
						
 000002F5  C3				ret
 000002F6			MoveDot ENDP

 000002F6			DrawWorld PROC

					; Open the file for reading
 000002F6  BA 0000037B R		mov edx, OFFSET filename      ; Pointer to filename
 000002FB  E8 00000000 E		call OpenInputFile                 ; OpenFile is used for reading; adjust if needed
 00000300  A3 0000170D R		mov fileHandle, eax            ; Save file handle

					; Read from the file
 00000305  A1 0000170D R		mov eax, fileHandle            ; File handle
 0000030A  BA 00000385 R		mov edx, OFFSET buffer         ; Buffer to store file data
 0000030F  B9 00001388			mov ecx, SIZEOF buffer         ; Max bytes to read
 00000314  E8 00000000 E		call ReadFromFile              ; Read file content
 00000319  A3 00001711 R		mov bytesRead, eax             ; Save the number of bytes read
 0000031E  72 02			jc   readError                 ; Jump if error occurred
 00000320  EB 0C			jmp readSuccess

 00000322				readError:
 00000322  E8 00000000 E			call WriteWindowsMsg
						exit

 0000032E				readSuccess:

					; Close the file
 0000032E  A1 0000170D R		mov eax, fileHandle
 00000333  E8 00000000 E		call CloseFile

					;Buffer contains the worlds information
 00000338  33 FF			xor edi, edi                ; Clear edi for use as index
 0000033A  8B 0D 00001711 R	    mov ecx, bytesRead          ; Length of the buffer to print

					; Clear Screen before drawing
 00000340  E8 00000000 E		call Clrscr
 00000345			DrawLoop:
 00000345  3B F9		    cmp edi, ecx                ; Check if we've reached the end of the buffer
 00000347  74 16		    je EndDraw                  ; Jump to end if done

 00000349  8A 87 00000385 R	    mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension

 0000034F  3C 2A			cmp al, '*'
 00000351  74 02			je ChangeColorYellow

 00000353				ChangeColorDefault:
					;ChangeTextColor white + (black * 16)
 00000353  EB 02			jmp Write

 00000355				ChangeColorYellow:
					;ChangeTextColor yellow + (black * 16)
 00000355  EB 00			jmp Write


 00000357				Write:
 00000357  E8 00000000 E	    call WriteChar					; Write the character to the 


 0000035C  47			    inc edi                     ; Move to the next character
 0000035D  EB E6		    jmp DrawLoop                ; Continue loop

 0000035F			EndDraw:
 0000035F  C3			    ret

 00000360			DrawWorld ENDP

 00000360			DrawInfo PROC
 00000360  B2 55			mov dl, 85
 00000362  B6 00			mov dh, 0
 00000364  E8 00000000 E		call Gotoxy
 00000369  0F B6 05			movzx eax, xPos
	   00002AC1 R
 00000370  E8 00000000 E		call WriteInt

 00000375  B2 55			mov dl, 85
 00000377  B6 01			mov dh, 1
 00000379  E8 00000000 E		call Gotoxy
 0000037E  0F B6 05			movzx eax, yPos
	   00002AC2 R
 00000385  E8 00000000 E		call WriteInt

 0000038A  B2 55			mov dl, 85
 0000038C  B6 02			mov dh, 2
 0000038E  E8 00000000 E		call Gotoxy

 00000393  0F B6 05			movzx eax, maxX	; move max X into eax
	   00002ABF R
 0000039A  83 C0 02			add eax, 2
 0000039D  0F B6 3D			movzx edi, yPos	; move y into edi
	   00002AC2 R
 000003A4  8B DA			mov ebx, edx
 000003A6  F7 E7			mul edi			; multiply y by max x to get right row
 000003A8  8B D3			mov edx, ebx
 000003AA  8B F8			mov edi, eax	; mov mul result back into edi
 000003AC  0F B6 05			movzx eax, xPos	; zero extend xpos to add to edi
	   00002AC1 R
 000003B3  03 F8			add edi, eax	; add x to edi to get proper index

 000003B5  4F				dec edi
 000003B6  8A 87 00000385 R		mov al, byte ptr [buffer + edi]
					
 000003BC  E8 00000000 E		call WriteChar

 000003C1  B2 55			mov dl, 85
 000003C3  B6 03			mov dh, 3
 000003C5  E8 00000000 E		call Gotoxy

 000003CA  47				inc edi
 000003CB  47				inc edi
 000003CC  8A 87 00000385 R		mov al, byte ptr [buffer + edi]

 000003D2  E8 00000000 E		call WriteChar


 000003D7  C3				ret
 000003D8			DrawInfo ENDP

 000003D8			PreparePhrases PROC
					; Open the file for reading
 000003D8  BA 00001715 R		mov edx, OFFSET phrasesfilename      ; Pointer to filename
 000003DD  E8 00000000 E		call OpenInputFile
 000003E2  A3 00002AAD R		mov phrasesfileHandle, eax

					; Read from the file
 000003E7  A1 00002AAD R		mov eax, phrasesfileHandle
 000003EC  BA 00001725 R		mov edx, OFFSET phrasesbuffer
 000003F1  B9 00001388			mov ecx, SIZEOF phrasesbuffer
 000003F6  E8 00000000 E		call ReadFromFile
 000003FB  A3 00002AB1 R		mov phrasesbytesRead, eax

					; Close the file
 00000400  A1 00002AAD R		mov eax, phrasesfileHandle
 00000405  E8 00000000 E		call CloseFile

 0000040A  C3				ret

					; phrasesbuffer contains the phrases information
 0000040B			PreparePhrases ENDP

 0000040B			GetRandomPhrase PROC
					; Get a random phrase
 0000040B  E8 00000000 E		call Randomize
 00000410  B8 0000004F			mov eax, 79
 00000415  E8 00000000 E		call RandomRange
 0000041A  8B D8			mov ebx, eax
 0000041C  43				inc ebx

					; ebx contains the randomly generated index

					; Find the phrase
 0000041D  33 FF			xor edi, edi
 0000041F  33 C9			xor ecx, ecx
					; ecx will contain the current phrase index

 00000421				FindLoop:
						; Find the end of the buffer
 00000421  3B 3D 00002AB1 R			cmp edi, phrasesbytesRead
 00000427  74 34				je EndFind

						; If randomly generated index matches the current phrase index, we found the phrase
 00000429  3B D9				cmp ebx, ecx
 0000042B  74 0E				je FoundPhrase

						; Check for new line, if not skip to NotNewlineFind
 0000042D  8A 87 00001725 R			mov al, byte ptr [phrasesbuffer + edi]
 00000433  3C 0A				cmp al, 0ah ; New line
 00000435  75 01				jne NotNewLineFind

						; Increment the phrase index
 00000437  41					inc ecx

 00000438				NotNewlineFind:
 00000438  47					inc edi			; Increment edi to show a character was read
 00000439  EB E6				jmp FindLoop

 0000043B				FoundPhrase:
						; Save the start of the phrase
 0000043B  89 3D 00002AB5 R			mov phraseStart, edi

						; Find the end of the phrase
 00000441					FindEnd:
 00000441  3B 3D 00002AB1 R				cmp edi, phrasesbytesRead	; Check if we've reached the end of the buffer
 00000447  74 0D					je FinishFind ; Jump to finish if done

 00000449  8A 87 00001725 R				mov al, byte ptr [phrasesbuffer + edi] ; Move the current character to al
 0000044F  47						inc edi ; Move to the next character
 00000450  3C 0A					cmp al, 0ah ; New line
 00000452  74 02					je FinishFind

 00000454  EB EB					jmp FindEnd

 00000456						FinishFind:
							; Save the end of the phrase
 00000456  4F						dec edi ; Move back one to get the last character of the phrase
 00000457  89 3D 00002AB9 R				mov phraseEnd, edi ; Save the end

 0000045D				EndFind:
 0000045D  C3				ret

 0000045E			GetRandomPhrase ENDP

 0000045E			PrintRandomPhrase PROC
 0000045E  E8 FFFFFFA8			call GetRandomPhrase

 00000463  8B 3D 00002AB5 R		mov edi, phraseStart
 00000469  8B 0D 00002AB9 R		mov ecx, phraseEnd

 0000046F				PrintLoop:
 0000046F  3B F9			    cmp edi, ecx	; Check if we've reached the end of the phrase
 00000471  74 0E				je EndPrint		; Jump to end if done

 00000473  8A 87 00001725 R			mov al, byte ptr [phrasesbuffer + edi]	; Move the current character to al
 00000479  E8 00000000 E			call WriteChar							; Write the character to the screen

 0000047E  47					inc edi			; Move to the next character
 0000047F  EB EE				jmp PrintLoop	; Continue loop

 00000481				EndPrint:
 00000481  C3				ret

 00000482			PrintRandomPhrase ENDP

 00000482			GenerateMathEquation PROC
					; Clear the equation buffer
 00000482  BF 00002ACB R		mov edi, OFFSET equationBuffer	; Move the offset of the equation buffer into edi
 00000487  B9 00001388			mov ecx, SIZEOF equationBuffer	; Move the size of the equation buffer into ecx
 0000048C  B0 00			mov al, 0	; Move 0 into al
 0000048E  F3/ AA			rep stosb	; Fill the buffer with 0

					; Clear the equation answer
 00000490  C7 05 00002AC4 R		mov equationAnswer, 0
	   00000000

					; Generate first term
 0000049A  E8 00000000 E		call Randomize
 0000049F  B8 00000009			mov eax, 9					; 9 is the maximum value for a term
 000004A4  E8 00000000 E		call RandomRange
 000004A9  40				inc eax						; Increment eax to get a number between 1 and 9

					; Store term into buffer
 000004AA  A2 00002ACA R		mov term, al				; Store the random number into term
 000004AF  A0 00002ACA R		mov al, term				; Move the term number into al
 000004B4  04 30			add al, 48					; Convert the number to ASCII
 000004B6  88 07			mov [edi], al				; Move the first term into buffer
 000004B8  47				inc edi						; Move to the next position in the equation buffer

					; Store term into Equation Answer
 000004B9  0F B6 05			movzx eax, term				; Move the term into eax
	   00002ACA R
 000004C0  A3 00002AC4 R		mov equationAnswer, eax	; Move the first term into the answer
 000004C5  FE C1			inc cl						; Increment the counter

					; Prepare counter
 000004C7  B1 01			mov cl, 1

					; Generate the terms
 000004C9				GenerateTerms:
						; Call small delay for time slicing
 000004C9  B8 0000000A				mov eax, 10
 000004CE  E8 00000000 E			call Delay
						; Generate a term
 000004D3  E8 00000000 E			call Randomize
 000004D8  B8 00000009				mov eax, 9		; 9 is the maximum value for a term
 000004DD  E8 00000000 E			call RandomRange
 000004E2  40					inc eax			; Increment eax to get a number between 1 and 9
 000004E3  A2 00002ACA R			mov term, al	; Move the term number into term


 000004E8  E8 00000000 E			call Randomize
 000004ED  B8 00000003				mov eax, 3			; 3 is the maximum number of operators
 000004F2  E8 00000000 E			call RandomRange	; Generate a random operator number between 1 and 3 in eax
 000004F7  40					inc eax				; Increment eax to get a number between 1 and 3
 000004F8  A2 00002AC9 R			mov operator, al	; Move the operator number into variable
					

						; Add the operator to the equation buffer
						.IF operator == 1
 00000506  C6 07 20					mov BYTE PTR [edi], ' '
 00000509  C6 47 01 2B					mov BYTE PTR [edi+1], '+'
 0000050D  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000511  0F B6 05					movzx eax, term				; Move the term into eax
	   00002ACA R
 00000518  01 05 00002AC4 R				add equationAnswer, eax		; Add the term to the answer
						.ELSEIF operator == 2
 00000529  C6 07 20					mov BYTE PTR [edi], ' '
 0000052C  C6 47 01 2D					mov BYTE PTR [edi+1], '-'
 00000530  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 00000534  A2 00002ACA R				mov term, al				; Move the term into al
 00000539  0F B6 05					movzx eax, term				; Move the term into eax
	   00002ACA R
 00000540  29 05 00002AC4 R				sub equationAnswer, eax		; Subtract the term from the answer
						.ELSEIF operator == 3
 00000551  C6 07 20					mov BYTE PTR [edi], ' '
 00000554  C6 47 01 2A					mov BYTE PTR [edi+1], '*'
 00000558  C6 47 02 20					mov BYTE PTR [edi+2], ' '
 0000055C  0F B6 1D					movzx ebx, term				; Move the term into ebx
	   00002ACA R
 00000563  A1 00002AC4 R				mov eax, equationAnswer		; Move the answer into eax
 00000568  F7 E3					mul ebx						; Multiply the term by the answer
 0000056A  A3 00002AC4 R				mov equationAnswer, eax		; Move the result into the equation answer
						.ENDIF

						; Add the term to the equation buffer
 0000056F  83 C7 03				add edi, 3					; Move to the end of the equation buffer
 00000572  A0 00002ACA R			mov al, term 				; Move the term into al
 00000577  04 30				add al, 48 					; Convert the number to ASCII
 00000579  88 07				mov [edi], al				; Move the term into the equation buffer
 0000057B  47					inc edi						; Move to the next position in the equation buffer

						; Increment the counter and check if we've reached the number of terms
 0000057C  FE C1				inc cl
 0000057E  3A 0D 00002AC8 R			cmp cl, terms
 00000584  0F 8C FFFFFF3F			jl GenerateTerms

						; Add the equals sign to the equation buffer
 0000058A  C6 07 20				mov BYTE PTR [edi], ' '
 0000058D  C6 47 01 3D				mov BYTE PTR [edi+1], '='
 00000591  C6 47 02 20				mov BYTE PTR [edi+2], ' '
 00000595  C6 47 03 3F		        mov BYTE PTR [edi+3], '?'
 00000599  83 C7 04				add edi, 4

						; Print the equation
 0000059C  B9 00002ACB R			mov ecx, OFFSET equationBuffer
						
 000005A1					PrintLoop:
 000005A1  3B F9				cmp edi, ecx	; Check if we've reached the end of the equation
 000005A3  74 0A				je EndPrint		; Jump to end if done

 000005A5  8A 01				mov al, byte ptr [ecx]	; Move the current character to al
 000005A7  E8 00000000 E			call WriteChar							; Write the character to the screen
						
 000005AC  41					inc ecx
 000005AD  EB F2				jmp PrintLoop

 000005AF					EndPrint:
 000005AF  C3				ret

 000005B0			GenerateMathEquation ENDP

				END main
Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/01/24 15:54:03
runner.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00003E53 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DrawInfo . . . . . . . . . . . .	P Near	 00000360 _TEXT	Length= 00000078 Public STDCALL
DrawWorld  . . . . . . . . . . .	P Near	 000002F6 _TEXT	Length= 0000006A Public STDCALL
  readError  . . . . . . . . . .	L Near	 00000322 _TEXT	
  readSuccess  . . . . . . . . .	L Near	 0000032E _TEXT	
  DrawLoop . . . . . . . . . . .	L Near	 00000345 _TEXT	
  ChangeColorDefault . . . . . .	L Near	 00000353 _TEXT	
  ChangeColorYellow  . . . . . .	L Near	 00000355 _TEXT	
  Write  . . . . . . . . . . . .	L Near	 00000357 _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 0000035F _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateMathEquation . . . . . .	P Near	 00000482 _TEXT	Length= 0000012E Public STDCALL
  GenerateTerms  . . . . . . . .	L Near	 000004C9 _TEXT	
  PrintLoop  . . . . . . . . . .	L Near	 000005A1 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000005AF _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRandomPhrase  . . . . . . . .	P Near	 0000040B _TEXT	Length= 00000053 Public STDCALL
  FindLoop . . . . . . . . . . .	L Near	 00000421 _TEXT	
  NotNewlineFind . . . . . . . .	L Near	 00000438 _TEXT	
  FoundPhrase  . . . . . . . . .	L Near	 0000043B _TEXT	
  FindEnd  . . . . . . . . . . .	L Near	 00000441 _TEXT	
  FinishFind . . . . . . . . . .	L Near	 00000456 _TEXT	
  EndFind  . . . . . . . . . . .	L Near	 0000045D _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InitDotPosition  . . . . . . . .	P Near	 00000051 _TEXT	Length= 0000001E Public STDCALL
IntroScreen  . . . . . . . . . .	P Near	 0000003A _TEXT	Length= 00000017 Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 00000049 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDot  . . . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 00000287 Public STDCALL
  CheckStar  . . . . . . . . . .	L Near	 000000B4 _TEXT	
  checkPass  . . . . . . . . . .	L Near	 0000011D _TEXT	
  GoodInput  . . . . . . . . . .	L Near	 0000015A _TEXT	
  CorrectAnswer  . . . . . . . .	L Near	 00000164 _TEXT	
  IncorrectAnswer  . . . . . . .	L Near	 0000017F _TEXT	
  AnswerChecked  . . . . . . . .	L Near	 00000198 _TEXT	
  WaitLoop . . . . . . . . . . .	L Near	 000001A4 _TEXT	
  checkFail  . . . . . . . . . .	L Near	 000001B0 _TEXT	
  MoveUp . . . . . . . . . . . .	L Near	 000001B5 _TEXT	
  MoveDown . . . . . . . . . . .	L Near	 00000200 _TEXT	
  MoveLeft . . . . . . . . . . .	L Near	 0000024E _TEXT	
  MoveRight  . . . . . . . . . .	L Near	 0000028E _TEXT	
  RedrawDot  . . . . . . . . . .	L Near	 000002D1 _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PreparePhrases . . . . . . . . .	P Near	 000003D8 _TEXT	Length= 00000033 Public STDCALL
PrintRandomPhrase  . . . . . . .	P Near	 0000045E _TEXT	Length= 00000024 Public STDCALL
  PrintLoop  . . . . . . . . . .	L Near	 0000046F _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 00000481 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000003A Public STDCALL
  game . . . . . . . . . . . . .	L Near	 0000001D _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000385 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00001711 _DATA	
correctAnswerString  . . . . . .	Byte	 000002DB _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difficultyLevel  . . . . . . . .	Byte	 00002AC3 _DATA	
equationAnswer . . . . . . . . .	DWord	 00002AC4 _DATA	
equationBuffer . . . . . . . . .	Byte	 00002ACB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 0000170D _DATA	
filename . . . . . . . . . . . .	Byte	 0000037B _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectAnswerString  . . . . .	Byte	 0000033A _DATA	
introString  . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxX . . . . . . . . . . . . . .	Byte	 00002ABF _DATA	
maxY . . . . . . . . . . . . . .	Byte	 00002AC0 _DATA	
oldX . . . . . . . . . . . . . .	Byte	 00002ABD _DATA	
oldY . . . . . . . . . . . . . .	Byte	 00002ABE _DATA	
operator . . . . . . . . . . . .	Byte	 00002AC9 _DATA	
phraseEnd  . . . . . . . . . . .	DWord	 00002AB9 _DATA	
phraseStart  . . . . . . . . . .	DWord	 00002AB5 _DATA	
phrasesbuffer  . . . . . . . . .	Byte	 00001725 _DATA	
phrasesbytesRead . . . . . . . .	DWord	 00002AB1 _DATA	
phrasesfileHandle  . . . . . . .	DWord	 00002AAD _DATA	
phrasesfilename  . . . . . . . .	Byte	 00001715 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
terms  . . . . . . . . . . . . .	Byte	 00002AC8 _DATA	
term . . . . . . . . . . . . . .	Byte	 00002ACA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos . . . . . . . . . . . . . .	Byte	 00002AC1 _DATA	
yPos . . . . . . . . . . . . . .	Byte	 00002AC2 _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
