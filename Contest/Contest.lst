Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/22/24 10:58:55
runner.asm						     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 

				SetConsoleTextAttribute PROTO,
				    hConsoleOutput: DWORD,
				    wAttributes: WORD

				SetConsoleCursorInfo PROTO,
				    hConsoleOutput:DWORD,
				    lpConsoleCursorInfo:PTR CONSOLE_CURSOR_INFO

				CONSOLE_CURSOR_INFO STRUCT
				    dwSize DWORD ?
				    bVisible DWORD ?
				CONSOLE_CURSOR_INFO ENDS

 00000000			.data
 00000000 00000001		cursorInfo CONSOLE_CURSOR_INFO <1, FALSE>  ; Set cursor size to 1 and visibility to FALSE
	   00000000

 00000008 43 6F 6E 67 72	outroString db "Congratulations! You have collected all the stars and saved the world from math illiteracy!", 0Dh, 0Ah, 0Dh, 0Ah
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 59 6F 75
	   20 68 61 76 65
	   20 63 6F 6C 6C
	   65 63 74 65 64
	   20 61 6C 6C 20
	   74 68 65 20 73
	   74 61 72 73 20
	   61 6E 64 20 73
	   61 76 65 64 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   66 72 6F 6D 20
	   6D 61 74 68 20
	   69 6C 6C 69 74
	   65 72 61 63 79
	   21 0D 0A 0D 0A
 00000067  59 6F 75 20 61				db "You are now the math master of the world! Press any key to exit...", 0Dh, 0Ah, 0
	   72 65 20 6E 6F
	   77 20 74 68 65
	   20 6D 61 74 68
	   20 6D 61 73 74
	   65 72 20 6F 66
	   20 74 68 65 20
	   77 6F 72 6C 64
	   21 20 50 72 65
	   73 73 20 61 6E
	   79 20 6B 65 79
	   20 74 6F 20 65
	   78 69 74 2E 2E
	   2E 0D 0A 00

 000000AC 57 65 6C 63 6F	introString0 db "Welcome to...", 0Dh, 0Ah, 0Dh, 0Ah, 0
	   6D 65 20 74 6F
	   2E 2E 2E 0D 0A
	   0D 0A 00

 000000BE 20 20 5F 5F 20	titleString1 db "  __  __    _  _____ _   _ _____ __  __  ___  _   _ ___ _   _ __  __ ", 0Dh, 0Ah, 0
	   20 5F 5F 20 20
	   20 20 5F 20 20
	   5F 5F 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   5F 5F 20 5F 5F
	   20 20 5F 5F 20
	   20 5F 5F 5F 20
	   20 5F 20 20 20
	   5F 20 5F 5F 5F
	   20 5F 20 20 20
	   5F 20 5F 5F 20
	   20 5F 5F 20 0D
	   0A 00
 00000106 20 7C 20 20 5C	titleString2 db " |  \/  |  / \|_   _| | | | ____|  \/  |/ _ \| \ | |_ _| | | |  \/  |", 0Dh, 0Ah, 0
	   2F 20 20 7C 20
	   20 2F 20 5C 7C
	   5F 20 20 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 5F 5F
	   5F 5F 7C 20 20
	   5C 2F 20 20 7C
	   2F 20 5F 20 5C
	   7C 20 5C 20 7C
	   20 7C 5F 20 5F
	   7C 20 7C 20 7C
	   20 7C 20 20 5C
	   2F 20 20 7C 0D
	   0A 00
 0000014E 20 7C 20 7C 5C	titleString3 db " | |\/| | / _ \ | | | |_| |  _| | |\/| | | | |  \| || || | | | |\/| |", 0Dh, 0Ah, 0
	   2F 7C 20 7C 20
	   2F 20 5F 20 5C
	   20 7C 20 7C 20
	   7C 20 7C 5F 7C
	   20 7C 20 20 5F
	   7C 20 7C 20 7C
	   5C 2F 7C 20 7C
	   20 7C 20 7C 20
	   7C 20 20 5C 7C
	   20 7C 7C 20 7C
	   7C 20 7C 20 7C
	   20 7C 20 7C 5C
	   2F 7C 20 7C 0D
	   0A 00
 00000196 20 7C 20 7C 20	titleString4 db " | |  | |/ ___ \| | |  _  | |___| |  | | |_| | |\  || || |_| | |  | |", 0Dh, 0Ah, 0
	   20 7C 20 7C 2F
	   20 5F 5F 5F 20
	   5C 7C 20 7C 20
	   7C 20 20 5F 20
	   20 7C 20 7C 5F
	   5F 5F 7C 20 7C
	   20 20 7C 20 7C
	   20 7C 5F 7C 20
	   7C 20 7C 5C 20
	   20 7C 7C 20 7C
	   7C 20 7C 5F 7C
	   20 7C 20 7C 20
	   20 7C 20 7C 0D
	   0A 00
 000001DE 20 7C 5F 7C 20	titleString5 db " |_|  |_/_/   \_\_| |_| |_|_____|_|  |_|\___/|_| \_|___|\___/|_|  |_|", 0Dh, 0Ah, 0Dh, 0Ah, 0
	   20 7C 5F 2F 5F
	   2F 20 20 20 5C
	   5F 5C 5F 7C 20
	   7C 5F 7C 20 7C
	   5F 7C 5F 5F 5F
	   5F 5F 7C 5F 7C
	   20 20 7C 5F 7C
	   5C 5F 5F 5F 2F
	   7C 5F 7C 20 5C
	   5F 7C 5F 5F 5F
	   7C 5C 5F 5F 5F
	   2F 7C 5F 7C 20
	   20 7C 5F 7C 0D
	   0A 0D 0A 00
 00000228 4E 6F 77 20 69	introString db "Now in color!", 0Dh, 0Ah, 0Dh, 0Ah
	   6E 20 63 6F 6C
	   6F 72 21 0D 0A
	   0D 0A

 00000239  61 20 67 61 6D				db "a game of math and adventure!", 0Dh, 0Ah
	   65 20 6F 66 20
	   6D 61 74 68 20
	   61 6E 64 20 61
	   64 76 65 6E 74
	   75 72 65 21 0D
	   0A
 00000258  54 72 61 76 65				db "Travel through the world and challenge all the math masters.... if you dare....", 0Dh, 0Ah, 0Dh, 0ah
	   6C 20 74 68 72
	   6F 75 67 68 20
	   74 68 65 20 77
	   6F 72 6C 64 20
	   61 6E 64 20 63
	   68 61 6C 6C 65
	   6E 67 65 20 61
	   6C 6C 20 74 68
	   65 20 6D 61 74
	   68 20 6D 61 73
	   74 65 72 73 2E
	   2E 2E 2E 20 69
	   66 20 79 6F 75
	   20 64 61 72 65
	   2E 2E 2E 2E 0D
	   0A 0D 0A
 000002AB  54 49 50 53 20				db "TIPS & INFO:", 0Dh, 0Ah
	   26 20 49 4E 46
	   4F 3A 0D 0A
 000002B9  20 2D 20 41 73				db " - Asterisks (*) represent a math master, go up and press space to begin battle", 0Dh, 0Ah
	   74 65 72 69 73
	   6B 73 20 28 2A
	   29 20 72 65 70
	   72 65 73 65 6E
	   74 20 61 20 6D
	   61 74 68 20 6D
	   61 73 74 65 72
	   2C 20 67 6F 20
	   75 70 20 61 6E
	   64 20 70 72 65
	   73 73 20 73 70
	   61 63 65 20 74
	   6F 20 62 65 67
	   69 6E 20 62 61
	   74 74 6C 65 0D
	   0A
 0000030A  20 2D 20 59 6F				db " - You may want to get some questions wrong here and there, as you win, difficulty and terms per question increase", 0Dh, 0Ah
	   75 20 6D 61 79
	   20 77 61 6E 74
	   20 74 6F 20 67
	   65 74 20 73 6F
	   6D 65 20 71 75
	   65 73 74 69 6F
	   6E 73 20 77 72
	   6F 6E 67 20 68
	   65 72 65 20 61
	   6E 64 20 74 68
	   65 72 65 2C 20
	   61 73 20 79 6F
	   75 20 77 69 6E
	   2C 20 64 69 66
	   66 69 63 75 6C
	   74 79 20 61 6E
	   64 20 74 65 72
	   6D 73 20 70 65
	   72 20 71 75 65
	   73 74 69 6F 6E
	   20 69 6E 63 72
	   65 61 73 65 0D
	   0A
 0000037E  20 2D 20 50 45				db " - PEMDAS now works! How exciting! Go ahead and ask the author how difficult it was to implement!", 0Dh, 0Ah
	   4D 44 41 53 20
	   6E 6F 77 20 77
	   6F 72 6B 73 21
	   20 48 6F 77 20
	   65 78 63 69 74
	   69 6E 67 21 20
	   47 6F 20 61 68
	   65 61 64 20 61
	   6E 64 20 61 73
	   6B 20 74 68 65
	   20 61 75 74 68
	   6F 72 20 68 6F
	   77 20 64 69 66
	   66 69 63 75 6C
	   74 20 69 74 20
	   77 61 73 20 74
	   6F 20 69 6D 70
	   6C 65 6D 65 6E
	   74 21 0D 0A
 000003E1  50 72 65 73 73				db "Press any key to continue...", 0Dh, 0Ah, 0
	   20 61 6E 79 20
	   6B 65 79 20 74
	   6F 20 63 6F 6E
	   74 69 6E 75 65
	   2E 2E 2E 0D 0A
	   00
						

 00000400 43 6F 72 72 65	correctAnswerString db "Correct! Math masters hear your name world wide and prepare in anticipation of your arrival...", 0
	   63 74 21 20 4D
	   61 74 68 20 6D
	   61 73 74 65 72
	   73 20 68 65 61
	   72 20 79 6F 75
	   72 20 6E 61 6D
	   65 20 77 6F 72
	   6C 64 20 77 69
	   64 65 20 61 6E
	   64 20 70 72 65
	   70 61 72 65 20
	   69 6E 20 61 6E
	   74 69 63 69 70
	   61 74 69 6F 6E
	   20 6F 66 20 79
	   6F 75 72 20 61
	   72 72 69 76 61
	   6C 2E 2E 2E 00
 0000045F 49 6E 63 6F 72	incorrectAnswerString db "Incorrect! The world is doomed to a future of math illiteracy...", 0
	   72 65 63 74 21
	   20 54 68 65 20
	   77 6F 72 6C 64
	   20 69 73 20 64
	   6F 6F 6D 65 64
	   20 74 6F 20 61
	   20 66 75 74 75
	   72 65 20 6F 66
	   20 6D 61 74 68
	   20 69 6C 6C 69
	   74 65 72 61 63
	   79 2E 2E 2E 00

 000004A0 77 6F 72 6C 64	filename BYTE "world.txt",0
	   2E 74 78 74 00
 000004AA  00001388 [		buffer BYTE 5000 DUP(?)
	    00
	   ]
 00001832 00000000		fileHandle DWORD ?
 00001836 00000000		bytesRead DWORD ?

 0000183A 6D 61 74 68 70	phrasesfilename BYTE "mathphrases.txt",0
	   68 72 61 73 65
	   73 2E 74 78 74
	   00
 0000184A  00001388 [		phrasesbuffer BYTE 5000 DUP(?)
	    00
	   ]
 00002BD2 00000000		phrasesfileHandle DWORD ?
 00002BD6 00000000		phrasesbytesRead DWORD ?
 00002BDA 00000000		phraseStart DWORD ?
 00002BDE 00000000		phraseEnd DWORD ?

 00002BE2 00000000		starPos DWORD ?
 00002BE6 00			totalStars BYTE 0
 00002BE7 00			oldX BYTE ?
 00002BE8 00			oldY BYTE ?
 00002BE9 50			maxX BYTE 80
 00002BEA 19			maxY BYTE 25
 00002BEB 01			xPos BYTE 1
 00002BEC 01			yPos BYTE 1

 00002BED 02			difficultyLevel BYTE 2

 00002BEE 00			currentTerm BYTE ?
 00002BEF  00000064 [		termArr db 100 DUP(?)
	    00
	   ]
 00002C53  00000064 [		operators db 100 DUP(?)
	    00
	   ]

 00002CB7 00			equationAnswer BYTE ?			; Variable to store the answer to the equation
 00002CB8 00			terms BYTE ?					; Number of terms in the equation
 00002CB9 00			operator BYTE ?					; Equation operator code
 00002CBA 00			term BYTE ?						; Equation term
 00002CBB  00001388 [		equationBuffer BYTE 5000 DUP(?) ; Buffer to store the equation
	    00
	   ]



				;=========================MACROS==================================================================================================================================

				; Macro to put buffer position into edi
				GetBufferPos MACRO
					movzx eax, maxX	; move max X into eax
					add eax, 2		; add 2 to account for new line characters
					movzx edi, yPos	; move y into edi
					mov ebx, edx
					mul edi			; multiply y by max x to get right row
					mov edx, ebx
					mov edi, eax	; mov mul result back into edi
					movzx eax, xPos	; zero extend xpos to add to edi
					add edi, eax	; add x to edi to get proper index
					ENDM

				; Define a macro named MoveByteToVar
				; Arguments:
				;   var - The variable to move the byte into
				;   src - The source pointer or index

				MoveByteToVar MACRO var, src
				    LOCAL tmpReg
				    movzx eax, BYTE PTR [src]   ; Move byte at src to EAX with zero-extension
				    mov [var], al				; Move the content of EAX to var
				ENDM

				RemoveBufferElement MACRO position
					; Calculate start of the shift
					mov esi, position	; Load the address of the next element into ESI
					inc esi
					mov edi, position		; Load the address of the current element into EDI

					; Set up for loop to shift all subsequent bytes left by one
					.WHILE BYTE PTR [edi] != 0FFh
						mov al, BYTE PTR [esi]	; Load byte at source position
						mov BYTE PTR [edi], al	; Store it into destination position
						inc esi			; Move to next source position
						inc edi			; Move to next destination position
					.ENDW

					mov BYTE PTR [edi], 0	; Clear the last byte
				ENDM


 00000000			.code
				;========================================MAIN==========================================================================================================================================
 00000000			main PROC
					
 00000000  E8 00000089			call HideCursor
 00000005  E8 00000428			call PrepareWorld
 0000000A  E8 0000053D			call PreparePhrases
 0000000F  E8 00000461			call CountStars

 00000014  E8 00000096			call IntroScreen

 00000019  E8 0000047F			call DrawWorld
 0000001E  E8 00000115			call InitDotPosition
					
 00000023  B2 55			mov dl, 85
 00000025  B6 05			mov dh, 5
 00000027  E8 00000000 E		call Gotoxy

					
 0000002C				game:
 0000002C  B8 00000010				mov eax, 16
 00000031  E8 00000000 E			call Delay
						;call DrawInfo
 00000036  E8 0000011B				call MoveDot
						.IF totalStars == 0
 00000044  EB 02					jmp Outro
						.ENDIF
 00000046  EB E4			jmp game

 00000048				Outro:
 00000048  E8 00000007				call DisplayOutro

					exit
 00000054			main ENDP

				;==========================================HELPER FUNCTIONS===============================================================================================================================

 00000054			DisplayOutro PROC
 00000054  E8 00000000 E		call Clrscr
 00000059  B2 00			mov dl, 0
 0000005B  B6 00			mov dh, 0
 0000005D  BA 00000008 R		mov edx, OFFSET outroString
 00000062  E8 00000000 E		call WriteString

					;Wait for key press before exiting outro screen
 00000067				WaitLoop:
 00000067  E8 00000000 E		call ReadKey
 0000006C  74 F9			jz WaitLoop

 0000006E  C3				ret
 0000006F			DisplayOutro ENDP

 0000006F			SetColor PROC
				    LOCAL hConsole:DWORD

					; Get a handle to the console's output buffer
					invoke GetStdHandle, STD_OUTPUT_HANDLE
 0000007C  89 45 FC			mov hConsole, eax

					; Set the text color
					invoke SetConsoleTextAttribute, hConsole, cx
					ret

 0000008E			SetColor ENDP

 0000008E			HideCursor PROC
				    LOCAL hConsole:DWORD
				    ; Get a handle to the console's output buffer
				    invoke GetStdHandle, STD_OUTPUT_HANDLE
 0000009B  89 45 FC		    mov hConsole, eax
				    ; Set the cursor info to hide the cursor
 0000009E  8D 05 00000000 R	    lea eax, cursorInfo
				    invoke SetConsoleCursorInfo, hConsole, eax
				    ret
 000000AF			HideCursor ENDP

 000000AF			IntroScreen PROC
 000000AF  BA 000000AC R		mov edx, OFFSET introString0
 000000B4  E8 00000000 E		call WriteString

					; Clear screen and write intro message
 000000B9  E8 00000000 E		call Clrscr
					; Print titleString in varying colors
 000000BE  66| B9 0004			mov cx, 4		  ; Attribute for red color
 000000C2  E8 FFFFFFA8			call SetColor
 000000C7  BA 000000BE R		mov edx, OFFSET titleString1
 000000CC  E8 00000000 E		call WriteString

 000000D1  66| B9 0006			mov cx, 6		; Attribute for orange color
 000000D5  E8 FFFFFF95			call SetColor
 000000DA  BA 00000106 R		mov edx, OFFSET titleString2
 000000DF  E8 00000000 E		call WriteString

 000000E4  66| B9 000E			mov cx, 14		; Attribute for yellow color
 000000E8  E8 FFFFFF82			call SetColor
 000000ED  BA 0000014E R		mov edx, OFFSET titleString3
 000000F2  E8 00000000 E		call WriteString 

 000000F7  66| B9 0002			mov cx, 2		; Attribute for green color
 000000FB  E8 FFFFFF6F			call SetColor
 00000100  BA 00000196 R		mov edx, OFFSET titleString4
 00000105  E8 00000000 E		call WriteString

 0000010A  66| B9 0001			mov cx, 1		; Attribute for blue color
 0000010E  E8 FFFFFF5C			call SetColor
 00000113  BA 000001DE R		mov edx, OFFSET titleString5
 00000118  E8 00000000 E		call WriteString

					; Reset text color to white on black
 0000011D  66| B9 000F			mov cx, 15         ; Attribute for bright white on black
 00000121  E8 FFFFFF49			call SetColor


 00000126  BA 00000228 R		mov edx, OFFSET introString
 0000012B  E8 00000000 E		call WriteString


					;Wait for key press before exiting intro screen
 00000130				WaitLoop:
 00000130  E8 00000000 E		call ReadKey
 00000135  74 F9			jz WaitLoop

 00000137  C3				ret
 00000138			IntroScreen ENDP

 00000138			InitDotPosition PROC
 00000138  BA 00000000			mov edx, 0
 0000013D  8A 15 00002BEB R		mov dl ,xPos
 00000143  8A 35 00002BEC R		mov dh, yPos
 00000149  E8 00000000 E		call Gotoxy
 0000014E  B0 2E			mov al, '.'
 00000150  E8 00000000 E		call WriteChar
 00000155  C3				ret
 00000156			InitDotPosition ENDP

 00000156			MoveDot PROC
 00000156  E8 00000000 E		call ReadKey
 0000015B  0F 84 0000028E		jz RedrawDot

					; Save old position
 00000161  8A 15 00002BEB R		mov dl, xPos
 00000167  88 15 00002BE7 R		mov oldX, dl
 0000016D  8A 35 00002BEC R		mov dh, yPos
 00000173  88 35 00002BE8 R		mov oldY, dh

					; Check direction based on virtual scan code (AH)
 00000179  80 FC 48		    cmp  ah, 48h        ; Up arrow
 0000017C  0F 84 0000013B	    je   MoveUp
 00000182  80 FC 50		    cmp  ah, 50h        ; Down arrow
 00000185  0F 84 00000188	    je   MoveDown
 0000018B  80 FC 4B		    cmp  ah, 4Bh        ; Left arrow
 0000018E  0F 84 000001D8	    je   MoveLeft
 00000194  80 FC 4D		    cmp  ah, 4Dh        ; Right arrow
 00000197  0F 84 0000020F	    je   MoveRight
 0000019D  80 FC 39			cmp  ah, 39h		; Space
 000001A0  74 05		          	je	 CheckStar
					
 000001A2  E9 00000248			jmp RedrawDot			; Check for new input if none matched

 000001A7				CheckStar:
						; Check if the dot is next to a star
						GetBufferPos
 000001A7  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 000001AE  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000001B1  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 000001B8  8B DA	     1		mov ebx, edx
 000001BA  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000001BC  8B D3	     1		mov edx, ebx
 000001BE  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000001C0  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 000001C7  03 F8	     1		add edi, eax	; add x to edi to get proper index

						; Place length of one row into eax
 000001C9  0F B6 1D				movzx ebx, maxX	; move max X into eax
	   00002BE9 R
 000001D0  83 C3 02				add ebx, 2		; add 2 to account for new line characters

						; Check Above
 000001D3  2B FB				sub edi, ebx	; subtract by one row to check above
 000001D5  8A 87 000004AA R			mov al, byte ptr [buffer + edi]
 000001DB  3C 2A				cmp al, '*'
 000001DD  74 2D				je checkPass

 000001DF  03 FB				add edi, ebx	; add back to edi to return to original position


						; Check Below
 000001E1  03 FB				add edi, ebx	; add one row to check below
 000001E3  8A 87 000004AA R			mov al, byte ptr [buffer + edi]
 000001E9  3C 2A				cmp al, '*'
 000001EB  74 1F				je checkPass

 000001ED  2B FB				sub edi, ebx	; subtract by one row to return to original position


						; Check Left
 000001EF  4F					dec edi			; move x left one to check left
 000001F0  8A 87 000004AA R			mov al, byte ptr [buffer + edi]
 000001F6  3C 2A				cmp al, '*'
 000001F8  74 12				je checkPass

 000001FA  47					inc edi 		; add back to edi to return to original position


						; Check Right
 000001FB  47					inc edi			; move x right one to check right
 000001FC  8A 87 000004AA R			mov al, byte ptr [buffer + edi]
 00000202  3C 2A				cmp al, '*'
 00000204  74 06				je checkPass

 00000206  4F					dec edi			; subtract by one row to return to original position

						
 00000207  E9 000000AC				jmp checkFail

 0000020C					checkPass:
						    ; Save the position of the star
 0000020C  89 3D 00002BE2 R				mov starPos, edi
							; Clear screen, write battle message, show math problem
 00000212  E8 00000000 E				call Clrscr
							; Move cursor to top left corner
 00000217  B2 00					mov dl, 0
 00000219  B6 00					mov dh, 0
 0000021B  E8 00000000 E				call Gotoxy
							; Write battle message
 00000220  E8 000003AD					call PrintRandomPhrase
							; Show math problem
 00000225  B2 00					mov dl, 0
 00000227  B6 05					mov dh, 5
 00000229  E8 00000000 E				call Gotoxy
 0000022E  E8 000003C3					call GenerateMathEquation
							; Read answer from user
 00000233  B2 00					mov dl, 0
 00000235  B6 0A					mov dh, 10
 00000237  E8 00000000 E				call Gotoxy
 0000023C  E8 00000000 E				call ReadInt
 00000241  71 0C					jno GoodInput

							;Write error message
 00000243  E8 00000000 E				call WriteWindowsMsg
							exit

							; If input is good, check against equation answer
 0000024F						GoodInput:
 0000024F  3A 05 00002CB7 R				cmp al, equationAnswer
 00000255  74 02					je CorrectAnswer

 00000257  EB 2E					jmp IncorrectAnswer

 00000259						CorrectAnswer: 
							; Write correct answer message, increase difficulty
 00000259  8B 3D 00002BE2 R				mov edi, starPos
 0000025F  C6 87 000004AA R				mov byte ptr [buffer + edi], ' '	; Change the star to a space
	   20
 00000266  FE 0D 00002BE6 R				dec totalStars

 0000026C  B2 00					mov dl, 0
 0000026E  B6 0F					mov dh, 15
 00000270  E8 00000000 E				call Gotoxy
 00000275  BA 00000400 R				mov edx, OFFSET correctAnswerString
 0000027A  E8 00000000 E				call WriteString
 0000027F  FE 05 00002BED R				inc difficultyLevel
 00000285  EB 19					jmp AnswerChecked

 00000287						IncorrectAnswer:
							; Write incorrect answer message, decrease difficulty
 00000287  B2 00					mov dl, 0
 00000289  B6 0F					mov dh, 15
 0000028B  E8 00000000 E				call Gotoxy
 00000290  BA 0000045F R				mov edx, OFFSET incorrectAnswerString
 00000295  E8 00000000 E				call WriteString
 0000029A  FE 0D 00002BED R				dec difficultyLevel

 000002A0						AnswerChecked:

							;update terms with difficulty level
 000002A0  8A 25 00002BED R				mov ah, difficultyLevel
 000002A6  88 25 00002CB8 R				mov terms, ah

							;Wait for key press before continuing
 000002AC						WaitLoop:
 000002AC  E8 00000000 E				call ReadKey
 000002B1  74 F9					jz WaitLoop

 000002B3  E8 000001E5					call DrawWorld


 000002B8					checkFail:
 000002B8  E9 00000132					jmp RedrawDot	



					
					
 000002BD				MoveUp:
 000002BD  8A 25 00002BEC R			mov ah, yPos
 000002C3  80 FC 01				cmp ah, 1
 000002C6  0F 8E 00000123			jle RedrawDot	; If dot cannot move, jump without decrementing

						GetBufferPos	; Put dot buffer position into edi
 000002CC  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 000002D3  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000002D6  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 000002DD  8B DA	     1		mov ebx, edx
 000002DF  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000002E1  8B D3	     1		mov edx, ebx
 000002E3  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000002E5  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 000002EC  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000002EE  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002BE9 R
 000002F5  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 000002F8  2B FB				sub edi, ebx 	; Move edi up one row to check above

 000002FA  8A 87 000004AA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

 00000300  3C 20				cmp al, ' '
 00000302  0F 85 000000E7			jne RedrawDot	; If space to be moved into isn't empty, skip

 00000308  FE 0D 00002BEC R			dec yPos	
 0000030E  E9 000000DC				jmp RedrawDot

 00000313				MoveDown:
 00000313  8A 25 00002BEC R			mov ah, yPos
 00000319  3A 25 00002BEA R			cmp ah, [maxY]
 0000031F  0F 8D 000000CA			jge RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 00000325  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 0000032C  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000032F  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 00000336  8B DA	     1		mov ebx, edx
 00000338  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000033A  8B D3	     1		mov edx, ebx
 0000033C  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000033E  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 00000345  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000347  0F B6 1D				movzx ebx, maxX	; Move max X into ebx
	   00002BE9 R
 0000034E  83 C3 02				add ebx, 2		; Add 2 to account for new line characters
 00000351  03 FB				add edi, ebx 	; Move edi down one row to check below

 00000353  8A 87 000004AA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al

						
 00000359  3C 20				cmp al, ' '
 0000035B  0F 85 0000008E			jne RedrawDot

 00000361  FE 05 00002BEC R			inc yPos
 00000367  E9 00000083				jmp RedrawDot

 0000036C				MoveLeft:
 0000036C  8A 25 00002BEB R			mov ah, xPos
 00000372  80 FC 01				cmp ah, 1
 00000375  7E 78				jle RedrawDot

						GetBufferPos	; Put dot buffer position into edi
 00000377  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 0000037E  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 00000381  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 00000388  8B DA	     1		mov ebx, edx
 0000038A  F7 E7	     1		mul edi			; multiply y by max x to get right row
 0000038C  8B D3	     1		mov edx, ebx
 0000038E  8B F8	     1		mov edi, eax	; mov mul result back into edi
 00000390  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 00000397  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000399  4F					dec edi			; move x left one to account for move

 0000039A  8A 87 000004AA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 000003A0  3C 20				cmp al, ' '
 000003A2  75 4B				jne RedrawDot

 000003A4  FE 0D 00002BEB R			dec xPos
 000003AA  EB 43				jmp RedrawDot

 000003AC				MoveRight:
 000003AC  8A 25 00002BEB R			mov ah, xPos
 000003B2  3A 25 00002BE9 R			cmp ah, [maxX]
 000003B8  7D 35				jge RedrawDot

						GetBufferPos 	; Put dot buffer position into edi
 000003BA  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 000003C1  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 000003C4  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 000003CB  8B DA	     1		mov ebx, edx
 000003CD  F7 E7	     1		mul edi			; multiply y by max x to get right row
 000003CF  8B D3	     1		mov edx, ebx
 000003D1  8B F8	     1		mov edi, eax	; mov mul result back into edi
 000003D3  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 000003DA  03 F8	     1		add edi, eax	; add x to edi to get proper index

 000003DC  47					inc edi			; move x right one to account for move

 000003DD  8A 87 000004AA R			mov al, byte ptr [buffer + edi]	; Move the character at the buffer position into al
						
 000003E3  3C 20				cmp al, ' '
 000003E5  75 08				jne RedrawDot

 000003E7  FE 05 00002BEB R			inc xPos
 000003ED  EB 00				jmp RedrawDot

 000003EF				RedrawDot:
 000003EF  8A 15 00002BE7 R			mov dl, oldX
 000003F5  8A 35 00002BE8 R			mov dh, oldY
 000003FB  E8 00000000 E			call Gotoxy
 00000400  B0 20				mov al, ' '
 00000402  E8 00000000 E			call WriteChar	; Write space over old dot

						; Set text color to red
 00000407  66| B9 0004				mov cx, 4          ; Attribute for red color
 0000040B  E8 FFFFFC5F				call SetColor

 00000410  8A 15 00002BEB R			mov dl, xPos
 00000416  8A 35 00002BEC R			mov dh, yPos
 0000041C  E8 00000000 E			call Gotoxy		; Go to new xy
 00000421  B0 2E				mov al, '.'
 00000423  E8 00000000 E			call WriteChar	; Write dot in new xy

						; Reset text color to white on black
 00000428  66| B9 000F				mov cx, 15         ; Attribute for bright white on black
 0000042C  E8 FFFFFC3E				call SetColor
						
 00000431  C3				ret
 00000432			MoveDot ENDP

 00000432			PrepareWorld PROC
					; Open the file for reading
 00000432  BA 000004A0 R		mov edx, OFFSET filename      ; Pointer to filename
 00000437  E8 00000000 E		call OpenInputFile                 ; OpenFile is used for reading; adjust if needed
 0000043C  A3 00001832 R		mov fileHandle, eax            ; Save file handle

					; Read from the file
 00000441  A1 00001832 R		mov eax, fileHandle            ; File handle
 00000446  BA 000004AA R		mov edx, OFFSET buffer         ; Buffer to store file data
 0000044B  B9 00001388			mov ecx, SIZEOF buffer         ; Max bytes to read
 00000450  E8 00000000 E		call ReadFromFile              ; Read file content
 00000455  A3 00001836 R		mov bytesRead, eax             ; Save the number of bytes read
 0000045A  72 02			jc   readError                 ; Jump if error occurred
 0000045C  EB 0C			jmp readSuccess

 0000045E				readError:
 0000045E  E8 00000000 E			call WriteWindowsMsg
						exit

 0000046A				readSuccess:

					; Close the file
 0000046A  A1 00001832 R		mov eax, fileHandle
 0000046F  E8 00000000 E		call CloseFile

 00000474  C3				ret
 00000475			PrepareWorld ENDP

 00000475				CountStars PROC
 00000475  33 FF				xor edi, edi                ; Clear edi for use as index
 00000477  8B 0D 00001836 R			mov ecx, bytesRead          ; Length of the buffer to print

						; Clear Screen before drawing
 0000047D  E8 00000000 E			call Clrscr
 00000482				CountLoop:
 00000482  3B F9				cmp edi, ecx                ; Check if we've reached the end of the buffer
 00000484  74 16				je EndCount                  ; Jump to end if done

 00000486  8A 87 000004AA R			mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension
 0000048C  3C 2A				cmp al, '*'
 0000048E  74 03				je CountStar

 00000490  47					inc edi                     ; Move to the next character
 00000491  EB EF				jmp CountLoop                ; Continue loop

 00000493				CountStar:
 00000493  FE 05 00002BE6 R			inc totalStars
 00000499  47					inc edi
 0000049A  EB E6				jmp CountLoop

 0000049C				EndCount:


 0000049C  C3				ret
 0000049D			CountStars ENDP

 0000049D			DrawWorld PROC	
					;Buffer contains the worlds information
 0000049D  33 FF			xor edi, edi                ; Clear edi for use as index
 0000049F  8B 1D 00001836 R	    mov ebx, bytesRead          ; Length of the buffer to print

					; Clear Screen before drawing
 000004A5  E8 00000000 E		call Clrscr
 000004AA			DrawLoop:
 000004AA  3B FB		    cmp edi, ebx                ; Check if we've reached the end of the buffer
 000004AC  74 2F		    je EndDraw                  ; Jump to end if done

 000004AE  8A 87 000004AA R	    mov al, byte ptr [buffer + edi] ; Move the current character to eax, zero-extend to prevent sign extension

 000004B4  3C 2A			cmp al, '*'
 000004B6  74 02			je WriteYellow

 000004B8  EB 1B			jmp NormalWrite

 000004BA				WriteYellow:
					 ; Set text color to yellow
 000004BA  66| B9 000E		    mov cx, 14                 ; Attribute for yellow color
 000004BE  E8 FFFFFBAC		    call SetColor
 000004C3  B0 2A			mov al, '*'
 000004C5  E8 00000000 E	    call WriteChar             ; Write the asterisk in yellow

					; Reset text color to white on black
 000004CA  66| B9 000F		    mov cx, 15                 ; Attribute for bright white on black
 000004CE  E8 FFFFFB9C		    call SetColor

 000004D3  EB 05			jmp PostWrite



 000004D5				NormalWrite:
 000004D5  E8 00000000 E	    call WriteChar					; Write the character to the 

 000004DA				PostWrite:


 000004DA  47			    inc edi                     ; Move to the next character
 000004DB  EB CD		    jmp DrawLoop                ; Continue loop

 000004DD			EndDraw:
 000004DD  C3			    ret

 000004DE			DrawWorld ENDP

 000004DE			DrawInfo PROC
 000004DE  B2 55			mov dl, 85
 000004E0  B6 00			mov dh, 0
 000004E2  E8 00000000 E		call Gotoxy
 000004E7  0F B6 05			movzx eax, xPos
	   00002BEB R
 000004EE  E8 00000000 E		call WriteInt

 000004F3  B2 55			mov dl, 85
 000004F5  B6 01			mov dh, 1
 000004F7  E8 00000000 E		call Gotoxy
 000004FC  0F B6 05			movzx eax, yPos
	   00002BEC R
 00000503  E8 00000000 E		call WriteInt

 00000508  B2 55			mov dl, 85
 0000050A  B6 02			mov dh, 2
 0000050C  E8 00000000 E		call Gotoxy

					GetBufferPos
 00000511  0F B6 05	     1		movzx eax, maxX	; move max X into eax
	   00002BE9 R
 00000518  83 C0 02	     1		add eax, 2		; add 2 to account for new line characters
 0000051B  0F B6 3D	     1		movzx edi, yPos	; move y into edi
	   00002BEC R
 00000522  8B DA	     1		mov ebx, edx
 00000524  F7 E7	     1		mul edi			; multiply y by max x to get right row
 00000526  8B D3	     1		mov edx, ebx
 00000528  8B F8	     1		mov edi, eax	; mov mul result back into edi
 0000052A  0F B6 05	     1		movzx eax, xPos	; zero extend xpos to add to edi
	   00002BEB R
 00000531  03 F8	     1		add edi, eax	; add x to edi to get proper index

 00000533  4F				dec edi
 00000534  8A 87 000004AA R		mov al, byte ptr [buffer + edi]
					
					;mWrite "Left: ", 0
					;call WriteChar

 0000053A  B2 55			mov dl, 85
 0000053C  B6 03			mov dh, 3
 0000053E  E8 00000000 E		call Gotoxy

 00000543  47				inc edi
 00000544  47				inc edi
 00000545  8A 87 000004AA R		mov al, byte ptr [buffer + edi]

					;mWrite "Right: ", 0
					;call WriteChar


 0000054B  C3				ret
 0000054C			DrawInfo ENDP

 0000054C			PreparePhrases PROC
					; Open the file for reading
 0000054C  BA 0000183A R		mov edx, OFFSET phrasesfilename      ; Pointer to filename
 00000551  E8 00000000 E		call OpenInputFile
 00000556  A3 00002BD2 R		mov phrasesfileHandle, eax

					; Read from the file
 0000055B  A1 00002BD2 R		mov eax, phrasesfileHandle
 00000560  BA 0000184A R		mov edx, OFFSET phrasesbuffer
 00000565  B9 00001388			mov ecx, SIZEOF phrasesbuffer
 0000056A  E8 00000000 E		call ReadFromFile
 0000056F  A3 00002BD6 R		mov phrasesbytesRead, eax

					; Close the file
 00000574  A1 00002BD2 R		mov eax, phrasesfileHandle
 00000579  E8 00000000 E		call CloseFile

 0000057E  C3				ret

					; phrasesbuffer contains the phrases information
 0000057F			PreparePhrases ENDP

 0000057F			GetRandomPhrase PROC
					; Get a random phrase
 0000057F  E8 00000000 E		call Randomize
 00000584  B8 0000004F			mov eax, 79
 00000589  E8 00000000 E		call RandomRange
 0000058E  8B D8			mov ebx, eax
 00000590  43				inc ebx

					; ebx contains the randomly generated index

					; Find the phrase
 00000591  33 FF			xor edi, edi
 00000593  33 C9			xor ecx, ecx
					; ecx will contain the current phrase index

 00000595				FindLoop:
						; Find the end of the buffer
 00000595  3B 3D 00002BD6 R			cmp edi, phrasesbytesRead
 0000059B  74 34				je EndFind

						; If randomly generated index matches the current phrase index, we found the phrase
 0000059D  3B D9				cmp ebx, ecx
 0000059F  74 0E				je FoundPhrase

						; Check for new line, if not skip to NotNewlineFind
 000005A1  8A 87 0000184A R			mov al, byte ptr [phrasesbuffer + edi]
 000005A7  3C 0A				cmp al, 0ah ; New line
 000005A9  75 01				jne NotNewLineFind

						; Increment the phrase index
 000005AB  41					inc ecx

 000005AC				NotNewlineFind:
 000005AC  47					inc edi			; Increment edi to show a character was read
 000005AD  EB E6				jmp FindLoop

 000005AF				FoundPhrase:
						; Save the start of the phrase
 000005AF  89 3D 00002BDA R			mov phraseStart, edi

						; Find the end of the phrase
 000005B5					FindEnd:
 000005B5  3B 3D 00002BD6 R				cmp edi, phrasesbytesRead	; Check if we've reached the end of the buffer
 000005BB  74 0D					je FinishFind ; Jump to finish if done

 000005BD  8A 87 0000184A R				mov al, byte ptr [phrasesbuffer + edi] ; Move the current character to al
 000005C3  47						inc edi ; Move to the next character
 000005C4  3C 0A					cmp al, 0ah ; New line
 000005C6  74 02					je FinishFind

 000005C8  EB EB					jmp FindEnd

 000005CA						FinishFind:
							; Save the end of the phrase
 000005CA  4F						dec edi ; Move back one to get the last character of the phrase
 000005CB  89 3D 00002BDE R				mov phraseEnd, edi ; Save the end

 000005D1				EndFind:
 000005D1  C3				ret

 000005D2			GetRandomPhrase ENDP

 000005D2			PrintRandomPhrase PROC
 000005D2  E8 FFFFFFA8			call GetRandomPhrase

 000005D7  8B 3D 00002BDA R		mov edi, phraseStart
 000005DD  8B 0D 00002BDE R		mov ecx, phraseEnd

 000005E3				PrintLoop:
 000005E3  3B F9			    cmp edi, ecx	; Check if we've reached the end of the phrase
 000005E5  74 0E				je EndPrint		; Jump to end if done

 000005E7  8A 87 0000184A R			mov al, byte ptr [phrasesbuffer + edi]	; Move the current character to al
 000005ED  E8 00000000 E			call WriteChar							; Write the character to the screen

 000005F2  47					inc edi			; Move to the next character
 000005F3  EB EE				jmp PrintLoop	; Continue loop

 000005F5				EndPrint:
 000005F5  C3				ret

 000005F6			PrintRandomPhrase ENDP

 000005F6			GenerateMathEquation PROC
					; Clear the equation buffer
 000005F6  BF 00002CBB R		mov edi, OFFSET equationBuffer	; Move the offset of the equation buffer into edi
 000005FB  B9 00001388			mov ecx, SIZEOF equationBuffer	; Move the size of the equation buffer into ecx
 00000600  B0 00			mov al, 0	; Move 0 into al
 00000602  F3/ AA			rep stosb	; Fill the buffer with 0

					; Generate first term
 00000604  E8 00000000 E		call Randomize
 00000609  B8 00000009			mov eax, 9					; 9 is the maximum value for a term
 0000060E  E8 00000000 E		call RandomRange
 00000613  40				inc eax						; Increment eax to get a number between 1 and 9

					; Store term into buffer
 00000614  A2 00002CBA R		mov term, al				; Store the random number into term
 00000619  A0 00002CBA R		mov al, term				; Move the term number into al
 0000061E  04 30			add al, 48					; Convert the number to ASCII
 00000620  88 07			mov [edi], al				; Move the first term into buffer
 00000622  47				inc edi						; Move to the next position in the equation buffer

 00000623  FE C1			inc cl						; Increment the counter

					; Prepare counter
 00000625  B1 01			mov cl, 1

					; Generate the terms
 00000627				GenerateTerms:
						; Call small delay for time slicing
 00000627  B8 0000000A				mov eax, 10
 0000062C  E8 00000000 E			call Delay
						; Generate a term
 00000631  E8 00000000 E			call Randomize
 00000636  B8 00000009				mov eax, 9		; 9 is the maximum value for a term
 0000063B  E8 00000000 E			call RandomRange
 00000640  40					inc eax			; Increment eax to get a number between 1 and 9
 00000641  A2 00002CBA R			mov term, al	; Move the term number into term


 00000646  E8 00000000 E			call Randomize
 0000064B  B8 00000003				mov eax, 3			; 3 is the maximum number of operators
 00000650  E8 00000000 E			call RandomRange	; Generate a random operator number between 1 and 3 in eax
 00000655  40					inc eax				; Increment eax to get a number between 1 and 3
 00000656  A2 00002CB9 R			mov operator, al	; Move the operator number into variable
					

						; Add the operator to the equation buffer
						.IF operator == 1
 00000664  C6 07 20					mov BYTE PTR [edi], ' '
 00000667  C6 47 01 2B					mov BYTE PTR [edi+1], '+'
 0000066B  C6 47 02 20					mov BYTE PTR [edi+2], ' '
						.ELSEIF operator == 2
 0000067A  C6 07 20					mov BYTE PTR [edi], ' '
 0000067D  C6 47 01 2D					mov BYTE PTR [edi+1], '-'
 00000681  C6 47 02 20					mov BYTE PTR [edi+2], ' '
						.ELSEIF operator == 3
 00000690  C6 07 20					mov BYTE PTR [edi], ' '
 00000693  C6 47 01 2A					mov BYTE PTR [edi+1], '*'
 00000697  C6 47 02 20					mov BYTE PTR [edi+2], ' '
						.ENDIF

						; Add the term to the equation buffer
 0000069B  83 C7 03				add edi, 3					; Move to the end of the equation buffer
 0000069E  A0 00002CBA R			mov al, term 				; Move the term into al
 000006A3  04 30				add al, 48 					; Convert the number to ASCII
 000006A5  88 07				mov [edi], al				; Move the term into the equation buffer
 000006A7  47					inc edi						; Move to the next position in the equation buffer

						; Increment the counter and check if we've reached the number of terms
 000006A8  FE C1				inc cl
 000006AA  3A 0D 00002CB8 R			cmp cl, terms
 000006B0  0F 8C FFFFFF71			jl GenerateTerms

						; Add the equals sign to the equation buffer
 000006B6  C6 07 20				mov BYTE PTR [edi], ' '
 000006B9  C6 47 01 3D				mov BYTE PTR [edi+1], '='
 000006BD  C6 47 02 20				mov BYTE PTR [edi+2], ' '
 000006C1  C6 47 03 3F		        mov BYTE PTR [edi+3], '?'
 000006C5  83 C7 04				add edi, 4

						; Print the equation
 000006C8  B9 00002CBB R			mov ecx, OFFSET equationBuffer
						
 000006CD					PrintLoop:
 000006CD  3B F9				cmp edi, ecx	; Check if we've reached the end of the equation
 000006CF  74 0A				je EndPrint		; Jump to end if done

 000006D1  8A 01				mov al, byte ptr [ecx]	; Move the current character to al
 000006D3  E8 00000000 E			call WriteChar							; Write the character to the screen
						
 000006D8  41					inc ecx
 000006D9  EB F2				jmp PrintLoop

 000006DB					EndPrint:
 000006DB  E8 00000001				call EvaluateExpression
 000006E0  C3				ret

 000006E1			GenerateMathEquation ENDP

 000006E1			EvaluateExpression PROC
 000006E1  50			push eax

				;move edi to the start of the equation 
 000006E2  0F B6 05		movzx eax, difficultyLevel
	   00002BED R
 000006E9  6B C0 04		imul eax, 4
 000006EC  40			inc eax
 000006ED  2B F8		sub edi, eax

 000006EF  BB 00002BEF R	mov ebx, OFFSET termArr
 000006F4  B9 00002C53 R	mov ecx, OFFSET operators

				; Turn equation buffer into two arrays
 000006F9			TransformLoop:

 000006F9  8A 07			mov al, BYTE PTR [edi]		; Load current term into al
 000006FB  A2 00002BEE R		mov currentTerm, al			; Move al into currentTerm

					.IF currentTerm > '0' && currentTerm <= '9'	; currentToken is a number
 00000712  A0 00002BEE R			mov al, currentTerm
 00000717  88 03				mov BYTE PTR [ebx], al		; save currentToken to terms
 00000719  80 2B 30				sub BYTE PTR [ebx], 48				; convert to raw value
 0000071C  43					inc ebx						; increment ebx for next term
 0000071D  47					inc edi						; increment edi to point at next bufs
 0000071E  EB D9				jmp TransformLoop
					.ELSEIF currentTerm == '+' || currentTerm == '-' || currentTerm == '*'	; currentToken is a valid operator
 0000073D  A0 00002BEE R			mov al, currentTerm
 00000742  88 01				mov BYTE PTR [ecx], al				; save currentToken to operators
 00000744  41					inc ecx								; increment ecx for next operator
 00000745  47					inc edi								; increment edi for next buffer pos
 00000746  EB B1				jmp TransformLoop
					.ELSEIF currentTerm == ' '						; currentToken is a filler space
 00000753  47					inc edi				; Move to next position in buffer
 00000754  EB A3				jmp TransformLoop	; Start next loop
					.ELSE											; currentToken is anything else (i.e. '=')
 00000758  C6 03 FF			mov BYTE PTR [ebx], 0FFh		; Values to signal when end of useful data has been reached
 0000075B  C6 01 FF			mov BYTE PTR [ecx], 0FFh
					.ENDIF


 0000075E  C6 05 00002CB7 R	mov equationAnswer, 0		; Clear equation answer
	   00
 00000765  BB 00002BEF R	mov ebx, OFFSET termArr
 0000076A  B9 00002C53 R	mov ecx, OFFSET operators		; reset ebx and ecx to point to the arrays


				; First loop to evaluate the answer, performs all multiplication
 0000076F			EvalLoop1:

					;mov currentTerm, BYTE PTR [ecx]		; Load operator array into currentTerm, we will be searching mainly for operators
					MoveByteToVar currentTerm, ecx
 0000076F  0F B6 01	     1	    movzx eax, BYTE PTR [ecx]   ; Move byte at src to EAX with zero-extension
 00000772  A2 00002BEE R     1	    mov [currentTerm], al				; Move the content of EAX to var


					; When multiplication is found at index n, it's corresponding numbers are located at n and n+1 in the terms array.

					.IF currentTerm == '*'
 00000780  8B D1				mov edx, ecx					; save ecx (current term) into edx
 00000782  81 EA 00002C53 R			sub edx, OFFSET operators		; sub original ecx from current to get distance from start
 00000788  0F B6 44 13 01			movzx eax, BYTE PTR [ebx+edx+1]
 0000078D  F6 2C 13				imul BYTE PTR [ebx+edx]			; multiply terms corresponding to operator and save in first operator position
 00000790  88 04 13				mov BYTE PTR [ebx+edx], al		; save result in first operator position

						; Set up for loop to shift all subsequent bytes left by one
 00000793					BufferShift:
 00000793  8A 44 13 02					mov al, BYTE PTR [ebx+edx+2]	; Load term byte at source position
 00000797  88 44 13 01					mov BYTE PTR [ebx+edx+1], al		; Store it into destination position

 0000079B  8A 44 11 01					mov al, BYTE PTR [ecx+edx+1]		; Load operator byte at source position
 0000079F  88 04 11					mov BYTE PTR [ecx+edx], al	; Store it into destination position

 000007A2  42						inc edx							; Move to next source position

 000007A3  8A 44 11 FF					mov al, BYTE PTR [ecx+edx-1]		; Load term byte at source position

 000007A7  3C 00					cmp al, 0
 000007A9  74 23					je EvalLoop1End

 000007AB  3C FF					cmp al, 0FFh	; Check if we've reached the end of the array
 000007AD  75 E4					jne BufferShift
 000007AF  C6 44 13 01 00			mov BYTE PTR [ebx+edx+1], 0	; Clear the last byte
 000007B4  C6 04 11 00				mov BYTE PTR [ecx+edx], 0	; Clear the last byte

						;inc ecx							; increment ecx for next operator
 000007B8  EB B5				jmp EvalLoop1
					.ELSEIF currentTerm == 0FFh; if current term is data-end signal, finish loop
 000007C5  EB 07				jmp EvalLoop1End
					.ELSE	; if not multiplication, continue loop
 000007C9  41					inc ecx
 000007CA  EB A3				jmp EvalLoop1
					.ENDIF

 000007CC  EB A1		jmp EvalLoop1
 000007CE			EvalLoop1End:
 000007CE  BB 00002BEF R		mov ebx, OFFSET termArr
 000007D3  B9 00002C53 R		mov ecx, OFFSET operators

				; Second loop to do all addition and subtraction
 000007D8			EvalLoop2:
					MoveByteToVar currentTerm, ecx
 000007D8  0F B6 01	     1	    movzx eax, BYTE PTR [ecx]   ; Move byte at src to EAX with zero-extension
 000007DB  A2 00002BEE R     1	    mov [currentTerm], al				; Move the content of EAX to var

					MoveByteToVar equationAnswer, ebx	; Move first term into equation answer
 000007E0  0F B6 03	     1	    movzx eax, BYTE PTR [ebx]   ; Move byte at src to EAX with zero-extension
 000007E3  A2 00002CB7 R     1	    mov [equationAnswer], al				; Move the content of EAX to var
 000007E8  43				inc ebx								; Increment ebx to consider next operator

 000007E9				LoopStart:
					.WHILE BYTE PTR [ecx] != 0FFh
						; Loop through terms to find next non-zero number
 000007EB  8A 01				mov al, BYTE PTR [ecx]	; Load current operator into al
 000007ED  8A 23				mov ah, BYTE PTR [ebx]	; Load current term into ah

						.IF ah != 0						; If term isn't zero, go ahead and check for next 
							.IF al == '+' ; If next operator is addition
 000007F7  00 25 00002CB7 R					add equationAnswer, ah	; Add next term, move to next one
 000007FD  43							inc ebx
 000007FE  41							inc ecx					; Increment ecx to consider next operator
							.ELSEIF al == '-' ; If next operator is substraction
 00000805  28 25 00002CB7 R					sub equationAnswer, ah	; Subtract next term, move to next one
 0000080B  43							inc ebx
 0000080C  41							inc ecx					; Increment ecx to consider next operator
							.ELSEIF al == 0FFh	; If end of data has been reached, end loop
 00000813  EB 0B						jmp EvalLoopFinish
							.ELSE						; In case of any other character, increment to next operator and check again
 00000817  41							inc ecx					; Increment ecx to consider next operator			
							.ENDIF
						.ELSE
 0000081A  41						inc ecx						; If term is zero, it was erased, increment to next term but not operator
						.ENDIF									
						.ENDW
 00000820				EvalLoopFinish:
					
 00000820  58				pop eax
 00000821  C3				ret
 00000822			EvaluateExpression ENDP

				END main
Microsoft (R) Macro Assembler Version 14.39.33523.0	    04/22/24 10:58:55
runner.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

GetBufferPos . . . . . . . . . .	Proc
IsDefined  . . . . . . . . . . .	Func
MoveByteToVar  . . . . . . . . .	Proc
RemoveBufferElement  . . . . . .	Proc
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00004043 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000822 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CountStars . . . . . . . . . . .	P Near	 00000475 _TEXT	Length= 00000028 Public STDCALL
  CountLoop  . . . . . . . . . .	L Near	 00000482 _TEXT	
  CountStar  . . . . . . . . . .	L Near	 00000493 _TEXT	
  EndCount . . . . . . . . . . .	L Near	 0000049C _TEXT	
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayOutro . . . . . . . . . .	P Near	 00000054 _TEXT	Length= 0000001B Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 00000067 _TEXT	
DrawInfo . . . . . . . . . . . .	P Near	 000004DE _TEXT	Length= 0000006E Public STDCALL
DrawWorld  . . . . . . . . . . .	P Near	 0000049D _TEXT	Length= 00000041 Public STDCALL
  DrawLoop . . . . . . . . . . .	L Near	 000004AA _TEXT	
  WriteYellow  . . . . . . . . .	L Near	 000004BA _TEXT	
  NormalWrite  . . . . . . . . .	L Near	 000004D5 _TEXT	
  PostWrite  . . . . . . . . . .	L Near	 000004DA _TEXT	
  EndDraw  . . . . . . . . . . .	L Near	 000004DD _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
EvaluateExpression . . . . . . .	P Near	 000006E1 _TEXT	Length= 00000141 Public STDCALL
  TransformLoop  . . . . . . . .	L Near	 000006F9 _TEXT	
  EvalLoop1  . . . . . . . . . .	L Near	 0000076F _TEXT	
  BufferShift  . . . . . . . . .	L Near	 00000793 _TEXT	
  EvalLoop1End . . . . . . . . .	L Near	 000007CE _TEXT	
  EvalLoop2  . . . . . . . . . .	L Near	 000007D8 _TEXT	
  LoopStart  . . . . . . . . . .	L Near	 000007E9 _TEXT	
  EvalLoopFinish . . . . . . . .	L Near	 00000820 _TEXT	
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GenerateMathEquation . . . . . .	P Near	 000005F6 _TEXT	Length= 000000EB Public STDCALL
  GenerateTerms  . . . . . . . .	L Near	 00000627 _TEXT	
  PrintLoop  . . . . . . . . . .	L Near	 000006CD _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000006DB _TEXT	
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetRandomPhrase  . . . . . . . .	P Near	 0000057F _TEXT	Length= 00000053 Public STDCALL
  FindLoop . . . . . . . . . . .	L Near	 00000595 _TEXT	
  NotNewlineFind . . . . . . . .	L Near	 000005AC _TEXT	
  FoundPhrase  . . . . . . . . .	L Near	 000005AF _TEXT	
  FindEnd  . . . . . . . . . . .	L Near	 000005B5 _TEXT	
  FinishFind . . . . . . . . . .	L Near	 000005CA _TEXT	
  EndFind  . . . . . . . . . . .	L Near	 000005D1 _TEXT	
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HideCursor . . . . . . . . . . .	P Near	 0000008E _TEXT	Length= 00000021 Public STDCALL
  hConsole . . . . . . . . . . .	DWord	 bp - 00000004
InitDotPosition  . . . . . . . .	P Near	 00000138 _TEXT	Length= 0000001E Public STDCALL
IntroScreen  . . . . . . . . . .	P Near	 000000AF _TEXT	Length= 00000089 Public STDCALL
  WaitLoop . . . . . . . . . . .	L Near	 00000130 _TEXT	
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MoveDot  . . . . . . . . . . . .	P Near	 00000156 _TEXT	Length= 000002DC Public STDCALL
  CheckStar  . . . . . . . . . .	L Near	 000001A7 _TEXT	
  checkPass  . . . . . . . . . .	L Near	 0000020C _TEXT	
  GoodInput  . . . . . . . . . .	L Near	 0000024F _TEXT	
  CorrectAnswer  . . . . . . . .	L Near	 00000259 _TEXT	
  IncorrectAnswer  . . . . . . .	L Near	 00000287 _TEXT	
  AnswerChecked  . . . . . . . .	L Near	 000002A0 _TEXT	
  WaitLoop . . . . . . . . . . .	L Near	 000002AC _TEXT	
  checkFail  . . . . . . . . . .	L Near	 000002B8 _TEXT	
  MoveUp . . . . . . . . . . . .	L Near	 000002BD _TEXT	
  MoveDown . . . . . . . . . . .	L Near	 00000313 _TEXT	
  MoveLeft . . . . . . . . . . .	L Near	 0000036C _TEXT	
  MoveRight  . . . . . . . . . .	L Near	 000003AC _TEXT	
  RedrawDot  . . . . . . . . . .	L Near	 000003EF _TEXT	
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PreparePhrases . . . . . . . . .	P Near	 0000054C _TEXT	Length= 00000033 Public STDCALL
PrepareWorld . . . . . . . . . .	P Near	 00000432 _TEXT	Length= 00000043 Public STDCALL
  readError  . . . . . . . . . .	L Near	 0000045E _TEXT	
  readSuccess  . . . . . . . . .	L Near	 0000046A _TEXT	
PrintRandomPhrase  . . . . . . .	P Near	 000005D2 _TEXT	Length= 00000024 Public STDCALL
  PrintLoop  . . . . . . . . . .	L Near	 000005E3 _TEXT	
  EndPrint . . . . . . . . . . .	L Near	 000005F5 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetColor . . . . . . . . . . . .	P Near	 0000006F _TEXT	Length= 0000001F Public STDCALL
  hConsole . . . . . . . . . . .	DWord	 bp - 00000004
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000054 Public STDCALL
  game . . . . . . . . . . . . .	L Near	 0000002C _TEXT	
  Outro  . . . . . . . . . . . .	L Near	 00000048 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 000004AA _DATA	
bytesRead  . . . . . . . . . . .	DWord	 00001836 _DATA	
correctAnswerString  . . . . . .	Byte	 00000400 _DATA	
currentTerm  . . . . . . . . . .	Byte	 00002BEE _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
difficultyLevel  . . . . . . . .	Byte	 00002BED _DATA	
equationAnswer . . . . . . . . .	Byte	 00002CB7 _DATA	
equationBuffer . . . . . . . . .	Byte	 00002CBB _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00001832 _DATA	
filename . . . . . . . . . . . .	Byte	 000004A0 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
incorrectAnswerString  . . . . .	Byte	 0000045F _DATA	
introString0 . . . . . . . . . .	Byte	 000000AC _DATA	
introString  . . . . . . . . . .	Byte	 00000228 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxX . . . . . . . . . . . . . .	Byte	 00002BE9 _DATA	
maxY . . . . . . . . . . . . . .	Byte	 00002BEA _DATA	
oldX . . . . . . . . . . . . . .	Byte	 00002BE7 _DATA	
oldY . . . . . . . . . . . . . .	Byte	 00002BE8 _DATA	
operators  . . . . . . . . . . .	Byte	 00002C53 _DATA	
operator . . . . . . . . . . . .	Byte	 00002CB9 _DATA	
outroString  . . . . . . . . . .	Byte	 00000008 _DATA	
phraseEnd  . . . . . . . . . . .	DWord	 00002BDE _DATA	
phraseStart  . . . . . . . . . .	DWord	 00002BDA _DATA	
phrasesbuffer  . . . . . . . . .	Byte	 0000184A _DATA	
phrasesbytesRead . . . . . . . .	DWord	 00002BD6 _DATA	
phrasesfileHandle  . . . . . . .	DWord	 00002BD2 _DATA	
phrasesfilename  . . . . . . . .	Byte	 0000183A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
starPos  . . . . . . . . . . . .	DWord	 00002BE2 _DATA	
termArr  . . . . . . . . . . . .	Byte	 00002BEF _DATA	
terms  . . . . . . . . . . . . .	Byte	 00002CB8 _DATA	
term . . . . . . . . . . . . . .	Byte	 00002CBA _DATA	
titleString1 . . . . . . . . . .	Byte	 000000BE _DATA	
titleString2 . . . . . . . . . .	Byte	 00000106 _DATA	
titleString3 . . . . . . . . . .	Byte	 0000014E _DATA	
titleString4 . . . . . . . . . .	Byte	 00000196 _DATA	
titleString5 . . . . . . . . . .	Byte	 000001DE _DATA	
totalStars . . . . . . . . . . .	Byte	 00002BE6 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
xPos . . . . . . . . . . . . . .	Byte	 00002BEB _DATA	
yPos . . . . . . . . . . . . . .	Byte	 00002BEC _DATA	
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
